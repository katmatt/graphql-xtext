/*
 * generated by Xtext 2.23.0
 */
grammar InternalGraphQL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package io.github.katmatt.graphql.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package io.github.katmatt.graphql.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import io.github.katmatt.graphql.services.GraphQLGrammarAccess;

}

@parser::members {

 	private GraphQLGrammarAccess grammarAccess;

    public InternalGraphQLParser(TokenStream input, GraphQLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "TypeSystemDefinition";
   	}

   	@Override
   	protected GraphQLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleTypeSystemDefinition
entryRuleTypeSystemDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeSystemDefinitionRule()); }
	iv_ruleTypeSystemDefinition=ruleTypeSystemDefinition
	{ $current=$iv_ruleTypeSystemDefinition.current; }
	EOF;

// Rule TypeSystemDefinition
ruleTypeSystemDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeSystemDefinitionAccess().getSchemaDefinitionsSchemaDefinitionParserRuleCall_0_0());
				}
				lv_schemaDefinitions_0_0=ruleSchemaDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeSystemDefinitionRule());
					}
					add(
						$current,
						"schemaDefinitions",
						lv_schemaDefinitions_0_0,
						"io.github.katmatt.graphql.GraphQL.SchemaDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeSystemDefinitionAccess().getTypeDefinitionsTypeDefinitionParserRuleCall_1_0());
				}
				lv_typeDefinitions_1_0=ruleTypeDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeSystemDefinitionRule());
					}
					add(
						$current,
						"typeDefinitions",
						lv_typeDefinitions_1_0,
						"io.github.katmatt.graphql.GraphQL.TypeDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeSystemDefinitionAccess().getDirectiveDefinitionsDirectiveDefinitionParserRuleCall_2_0());
				}
				lv_directiveDefinitions_2_0=ruleDirectiveDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeSystemDefinitionRule());
					}
					add(
						$current,
						"directiveDefinitions",
						lv_directiveDefinitions_2_0,
						"io.github.katmatt.graphql.GraphQL.DirectiveDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)*
;

// Entry rule entryRuleSchemaDefinition
entryRuleSchemaDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSchemaDefinitionRule()); }
	iv_ruleSchemaDefinition=ruleSchemaDefinition
	{ $current=$iv_ruleSchemaDefinition.current; }
	EOF;

// Rule SchemaDefinition
ruleSchemaDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSchemaDefinitionAccess().getDescriptionStringValueParserRuleCall_0_0());
				}
				lv_description_0_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSchemaDefinitionRule());
					}
					set(
						$current,
						"description",
						lv_description_0_0,
						"io.github.katmatt.graphql.GraphQL.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1='schema'
		{
			newLeafNode(otherlv_1, grammarAccess.getSchemaDefinitionAccess().getSchemaKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getSchemaDefinitionAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSchemaDefinitionAccess().getTypeDefinitionsRootOperationTypeDefinitionParserRuleCall_3_0());
				}
				lv_typeDefinitions_3_0=ruleRootOperationTypeDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSchemaDefinitionRule());
					}
					add(
						$current,
						"typeDefinitions",
						lv_typeDefinitions_3_0,
						"io.github.katmatt.graphql.GraphQL.RootOperationTypeDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getSchemaDefinitionAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleRootOperationTypeDefinition
entryRuleRootOperationTypeDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRootOperationTypeDefinitionRule()); }
	iv_ruleRootOperationTypeDefinition=ruleRootOperationTypeDefinition
	{ $current=$iv_ruleRootOperationTypeDefinition.current; }
	EOF;

// Rule RootOperationTypeDefinition
ruleRootOperationTypeDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRootOperationTypeDefinitionAccess().getOperationTypeOperationTypeEnumRuleCall_0_0());
				}
				lv_operationType_0_0=ruleOperationType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRootOperationTypeDefinitionRule());
					}
					set(
						$current,
						"operationType",
						lv_operationType_0_0,
						"io.github.katmatt.graphql.GraphQL.OperationType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getRootOperationTypeDefinitionAccess().getColonKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRootOperationTypeDefinitionRule());
					}
				}
				otherlv_2=RULE_NAME
				{
					newLeafNode(otherlv_2, grammarAccess.getRootOperationTypeDefinitionAccess().getTypeTypeDefinitionCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleTypeDefinition
entryRuleTypeDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeDefinitionRule()); }
	iv_ruleTypeDefinition=ruleTypeDefinition
	{ $current=$iv_ruleTypeDefinition.current; }
	EOF;

// Rule TypeDefinition
ruleTypeDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeDefinitionAccess().getScalarTypeDefinitionParserRuleCall_0());
		}
		this_ScalarTypeDefinition_0=ruleScalarTypeDefinition
		{
			$current = $this_ScalarTypeDefinition_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeDefinitionAccess().getObjectTypeDefinitionParserRuleCall_1());
		}
		this_ObjectTypeDefinition_1=ruleObjectTypeDefinition
		{
			$current = $this_ObjectTypeDefinition_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeDefinitionAccess().getInterfaceDefinitionParserRuleCall_2());
		}
		this_InterfaceDefinition_2=ruleInterfaceDefinition
		{
			$current = $this_InterfaceDefinition_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeDefinitionAccess().getUnionTypeDefinitionParserRuleCall_3());
		}
		this_UnionTypeDefinition_3=ruleUnionTypeDefinition
		{
			$current = $this_UnionTypeDefinition_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeDefinitionAccess().getEnumTypeDefinitionParserRuleCall_4());
		}
		this_EnumTypeDefinition_4=ruleEnumTypeDefinition
		{
			$current = $this_EnumTypeDefinition_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeDefinitionAccess().getInputObjectTypeDefinitionParserRuleCall_5());
		}
		this_InputObjectTypeDefinition_5=ruleInputObjectTypeDefinition
		{
			$current = $this_InputObjectTypeDefinition_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleScalarTypeDefinition
entryRuleScalarTypeDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScalarTypeDefinitionRule()); }
	iv_ruleScalarTypeDefinition=ruleScalarTypeDefinition
	{ $current=$iv_ruleScalarTypeDefinition.current; }
	EOF;

// Rule ScalarTypeDefinition
ruleScalarTypeDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getScalarTypeDefinitionAccess().getDescriptionStringValueParserRuleCall_0_0());
				}
				lv_description_0_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScalarTypeDefinitionRule());
					}
					set(
						$current,
						"description",
						lv_description_0_0,
						"io.github.katmatt.graphql.GraphQL.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1='scalar'
		{
			newLeafNode(otherlv_1, grammarAccess.getScalarTypeDefinitionAccess().getScalarKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_NAME
				{
					newLeafNode(lv_name_2_0, grammarAccess.getScalarTypeDefinitionAccess().getNameNAMETerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getScalarTypeDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"io.github.katmatt.graphql.GraphQL.NAME");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getScalarTypeDefinitionAccess().getDirectivesDirectiveParserRuleCall_3_0());
				}
				lv_directives_3_0=ruleDirective
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScalarTypeDefinitionRule());
					}
					add(
						$current,
						"directives",
						lv_directives_3_0,
						"io.github.katmatt.graphql.GraphQL.Directive");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleObjectTypeDefinition
entryRuleObjectTypeDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectTypeDefinitionRule()); }
	iv_ruleObjectTypeDefinition=ruleObjectTypeDefinition
	{ $current=$iv_ruleObjectTypeDefinition.current; }
	EOF;

// Rule ObjectTypeDefinition
ruleObjectTypeDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectTypeDefinitionAccess().getDescriptionStringValueParserRuleCall_0_0());
				}
				lv_description_0_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectTypeDefinitionRule());
					}
					set(
						$current,
						"description",
						lv_description_0_0,
						"io.github.katmatt.graphql.GraphQL.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1='type'
		{
			newLeafNode(otherlv_1, grammarAccess.getObjectTypeDefinitionAccess().getTypeKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_NAME
				{
					newLeafNode(lv_name_2_0, grammarAccess.getObjectTypeDefinitionAccess().getNameNAMETerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjectTypeDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"io.github.katmatt.graphql.GraphQL.NAME");
				}
			)
		)
		(
			otherlv_3='implements'
			{
				newLeafNode(otherlv_3, grammarAccess.getObjectTypeDefinitionAccess().getImplementsKeyword_3_0());
			}
			(
				otherlv_4='&'
				{
					newLeafNode(otherlv_4, grammarAccess.getObjectTypeDefinitionAccess().getAmpersandKeyword_3_1());
				}
			)?
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getObjectTypeDefinitionRule());
						}
					}
					otherlv_5=RULE_NAME
					{
						newLeafNode(otherlv_5, grammarAccess.getObjectTypeDefinitionAccess().getImplementsInterfacesInterfaceDefinitionCrossReference_3_2_0());
					}
				)
			)
			(
				otherlv_6='&'
				{
					newLeafNode(otherlv_6, grammarAccess.getObjectTypeDefinitionAccess().getAmpersandKeyword_3_3_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getObjectTypeDefinitionRule());
							}
						}
						otherlv_7=RULE_NAME
						{
							newLeafNode(otherlv_7, grammarAccess.getObjectTypeDefinitionAccess().getImplementsInterfacesInterfaceDefinitionCrossReference_3_3_1_0());
						}
					)
				)
			)*
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectTypeDefinitionAccess().getDirectivesDirectiveParserRuleCall_4_0());
				}
				lv_directives_8_0=ruleDirective
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectTypeDefinitionRule());
					}
					add(
						$current,
						"directives",
						lv_directives_8_0,
						"io.github.katmatt.graphql.GraphQL.Directive");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_9='{'
			{
				newLeafNode(otherlv_9, grammarAccess.getObjectTypeDefinitionAccess().getLeftCurlyBracketKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getObjectTypeDefinitionAccess().getFieldDefinitionsFieldDefinitionParserRuleCall_5_1_0());
					}
					lv_fieldDefinitions_10_0=ruleFieldDefinition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getObjectTypeDefinitionRule());
						}
						add(
							$current,
							"fieldDefinitions",
							lv_fieldDefinitions_10_0,
							"io.github.katmatt.graphql.GraphQL.FieldDefinition");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_11='}'
			{
				newLeafNode(otherlv_11, grammarAccess.getObjectTypeDefinitionAccess().getRightCurlyBracketKeyword_5_2());
			}
		)?
	)
;

// Entry rule entryRuleInterfaceDefinition
entryRuleInterfaceDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInterfaceDefinitionRule()); }
	iv_ruleInterfaceDefinition=ruleInterfaceDefinition
	{ $current=$iv_ruleInterfaceDefinition.current; }
	EOF;

// Rule InterfaceDefinition
ruleInterfaceDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getInterfaceDefinitionAccess().getDescriptionStringValueParserRuleCall_0_0());
				}
				lv_description_0_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInterfaceDefinitionRule());
					}
					set(
						$current,
						"description",
						lv_description_0_0,
						"io.github.katmatt.graphql.GraphQL.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1='interface'
		{
			newLeafNode(otherlv_1, grammarAccess.getInterfaceDefinitionAccess().getInterfaceKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_NAME
				{
					newLeafNode(lv_name_2_0, grammarAccess.getInterfaceDefinitionAccess().getNameNAMETerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInterfaceDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"io.github.katmatt.graphql.GraphQL.NAME");
				}
			)
		)
		(
			otherlv_3='implements'
			{
				newLeafNode(otherlv_3, grammarAccess.getInterfaceDefinitionAccess().getImplementsKeyword_3_0());
			}
			(
				otherlv_4='&'
				{
					newLeafNode(otherlv_4, grammarAccess.getInterfaceDefinitionAccess().getAmpersandKeyword_3_1());
				}
			)?
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInterfaceDefinitionRule());
						}
					}
					otherlv_5=RULE_NAME
					{
						newLeafNode(otherlv_5, grammarAccess.getInterfaceDefinitionAccess().getImplementsInterfacesInterfaceDefinitionCrossReference_3_2_0());
					}
				)
			)
			(
				otherlv_6='&'
				{
					newLeafNode(otherlv_6, grammarAccess.getInterfaceDefinitionAccess().getAmpersandKeyword_3_3_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getInterfaceDefinitionRule());
							}
						}
						otherlv_7=RULE_NAME
						{
							newLeafNode(otherlv_7, grammarAccess.getInterfaceDefinitionAccess().getImplementsInterfacesInterfaceDefinitionCrossReference_3_3_1_0());
						}
					)
				)
			)*
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getInterfaceDefinitionAccess().getDirectivesDirectiveParserRuleCall_4_0());
				}
				lv_directives_8_0=ruleDirective
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInterfaceDefinitionRule());
					}
					add(
						$current,
						"directives",
						lv_directives_8_0,
						"io.github.katmatt.graphql.GraphQL.Directive");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_9='{'
			{
				newLeafNode(otherlv_9, grammarAccess.getInterfaceDefinitionAccess().getLeftCurlyBracketKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInterfaceDefinitionAccess().getFieldDefinitionsFieldDefinitionParserRuleCall_5_1_0());
					}
					lv_fieldDefinitions_10_0=ruleFieldDefinition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInterfaceDefinitionRule());
						}
						add(
							$current,
							"fieldDefinitions",
							lv_fieldDefinitions_10_0,
							"io.github.katmatt.graphql.GraphQL.FieldDefinition");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_11='}'
			{
				newLeafNode(otherlv_11, grammarAccess.getInterfaceDefinitionAccess().getRightCurlyBracketKeyword_5_2());
			}
		)?
	)
;

// Entry rule entryRuleFieldDefinition
entryRuleFieldDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldDefinitionRule()); }
	iv_ruleFieldDefinition=ruleFieldDefinition
	{ $current=$iv_ruleFieldDefinition.current; }
	EOF;

// Rule FieldDefinition
ruleFieldDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFieldDefinitionAccess().getDescriptionStringValueParserRuleCall_0_0());
				}
				lv_description_0_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFieldDefinitionRule());
					}
					set(
						$current,
						"description",
						lv_description_0_0,
						"io.github.katmatt.graphql.GraphQL.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_name_1_0=RULE_NAME
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFieldDefinitionAccess().getNameNAMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFieldDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"io.github.katmatt.graphql.GraphQL.NAME");
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getFieldDefinitionAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFieldDefinitionAccess().getArgumentsDefinitionInputValueDefinitionParserRuleCall_2_1_0());
					}
					lv_argumentsDefinition_3_0=ruleInputValueDefinition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFieldDefinitionRule());
						}
						add(
							$current,
							"argumentsDefinition",
							lv_argumentsDefinition_3_0,
							"io.github.katmatt.graphql.GraphQL.InputValueDefinition");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getFieldDefinitionAccess().getRightParenthesisKeyword_2_2());
			}
		)?
		otherlv_5=':'
		{
			newLeafNode(otherlv_5, grammarAccess.getFieldDefinitionAccess().getColonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFieldDefinitionAccess().getTypeTypeParserRuleCall_4_0());
				}
				lv_type_6_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFieldDefinitionRule());
					}
					set(
						$current,
						"type",
						lv_type_6_0,
						"io.github.katmatt.graphql.GraphQL.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleUnionTypeDefinition
entryRuleUnionTypeDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnionTypeDefinitionRule()); }
	iv_ruleUnionTypeDefinition=ruleUnionTypeDefinition
	{ $current=$iv_ruleUnionTypeDefinition.current; }
	EOF;

// Rule UnionTypeDefinition
ruleUnionTypeDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUnionTypeDefinitionAccess().getDescriptionStringValueParserRuleCall_0_0());
				}
				lv_description_0_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnionTypeDefinitionRule());
					}
					set(
						$current,
						"description",
						lv_description_0_0,
						"io.github.katmatt.graphql.GraphQL.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1='union'
		{
			newLeafNode(otherlv_1, grammarAccess.getUnionTypeDefinitionAccess().getUnionKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_NAME
				{
					newLeafNode(lv_name_2_0, grammarAccess.getUnionTypeDefinitionAccess().getNameNAMETerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnionTypeDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"io.github.katmatt.graphql.GraphQL.NAME");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUnionTypeDefinitionAccess().getDirectivesDirectiveParserRuleCall_3_0());
				}
				lv_directives_3_0=ruleDirective
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnionTypeDefinitionRule());
					}
					add(
						$current,
						"directives",
						lv_directives_3_0,
						"io.github.katmatt.graphql.GraphQL.Directive");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_4='='
			{
				newLeafNode(otherlv_4, grammarAccess.getUnionTypeDefinitionAccess().getEqualsSignKeyword_4_0());
			}
			(
				otherlv_5='|'
				{
					newLeafNode(otherlv_5, grammarAccess.getUnionTypeDefinitionAccess().getVerticalLineKeyword_4_1());
				}
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getUnionTypeDefinitionAccess().getMemberTypesTypeParserRuleCall_4_2_0());
					}
					lv_memberTypes_6_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnionTypeDefinitionRule());
						}
						add(
							$current,
							"memberTypes",
							lv_memberTypes_6_0,
							"io.github.katmatt.graphql.GraphQL.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_7='|'
				{
					newLeafNode(otherlv_7, grammarAccess.getUnionTypeDefinitionAccess().getVerticalLineKeyword_4_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getUnionTypeDefinitionAccess().getMemberTypesTypeParserRuleCall_4_3_1_0());
						}
						lv_memberTypes_8_0=ruleType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getUnionTypeDefinitionRule());
							}
							add(
								$current,
								"memberTypes",
								lv_memberTypes_8_0,
								"io.github.katmatt.graphql.GraphQL.Type");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleEnumTypeDefinition
entryRuleEnumTypeDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumTypeDefinitionRule()); }
	iv_ruleEnumTypeDefinition=ruleEnumTypeDefinition
	{ $current=$iv_ruleEnumTypeDefinition.current; }
	EOF;

// Rule EnumTypeDefinition
ruleEnumTypeDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumTypeDefinitionAccess().getDescriptionStringValueParserRuleCall_0_0());
				}
				lv_description_0_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumTypeDefinitionRule());
					}
					set(
						$current,
						"description",
						lv_description_0_0,
						"io.github.katmatt.graphql.GraphQL.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1='enum'
		{
			newLeafNode(otherlv_1, grammarAccess.getEnumTypeDefinitionAccess().getEnumKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_NAME
				{
					newLeafNode(lv_name_2_0, grammarAccess.getEnumTypeDefinitionAccess().getNameNAMETerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumTypeDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"io.github.katmatt.graphql.GraphQL.NAME");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumTypeDefinitionAccess().getDirectivesDirectiveParserRuleCall_3_0());
				}
				lv_directives_3_0=ruleDirective
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumTypeDefinitionRule());
					}
					add(
						$current,
						"directives",
						lv_directives_3_0,
						"io.github.katmatt.graphql.GraphQL.Directive");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_4='{'
			{
				newLeafNode(otherlv_4, grammarAccess.getEnumTypeDefinitionAccess().getLeftCurlyBracketKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEnumTypeDefinitionAccess().getEnumValuesDefinitionEnumValueDefinitionParserRuleCall_4_1_0());
					}
					lv_enumValuesDefinition_5_0=ruleEnumValueDefinition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEnumTypeDefinitionRule());
						}
						add(
							$current,
							"enumValuesDefinition",
							lv_enumValuesDefinition_5_0,
							"io.github.katmatt.graphql.GraphQL.EnumValueDefinition");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_6='}'
			{
				newLeafNode(otherlv_6, grammarAccess.getEnumTypeDefinitionAccess().getRightCurlyBracketKeyword_4_2());
			}
		)?
	)
;

// Entry rule entryRuleEnumValueDefinition
entryRuleEnumValueDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumValueDefinitionRule()); }
	iv_ruleEnumValueDefinition=ruleEnumValueDefinition
	{ $current=$iv_ruleEnumValueDefinition.current; }
	EOF;

// Rule EnumValueDefinition
ruleEnumValueDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumValueDefinitionAccess().getDescriptionStringValueParserRuleCall_0_0());
				}
				lv_description_0_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumValueDefinitionRule());
					}
					set(
						$current,
						"description",
						lv_description_0_0,
						"io.github.katmatt.graphql.GraphQL.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_name_1_0=RULE_NAME
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEnumValueDefinitionAccess().getNameNAMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumValueDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"io.github.katmatt.graphql.GraphQL.NAME");
				}
			)
		)
	)
;

// Entry rule entryRuleInputObjectTypeDefinition
entryRuleInputObjectTypeDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInputObjectTypeDefinitionRule()); }
	iv_ruleInputObjectTypeDefinition=ruleInputObjectTypeDefinition
	{ $current=$iv_ruleInputObjectTypeDefinition.current; }
	EOF;

// Rule InputObjectTypeDefinition
ruleInputObjectTypeDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getInputObjectTypeDefinitionAccess().getDescriptionStringValueParserRuleCall_0_0());
				}
				lv_description_0_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInputObjectTypeDefinitionRule());
					}
					set(
						$current,
						"description",
						lv_description_0_0,
						"io.github.katmatt.graphql.GraphQL.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1='input'
		{
			newLeafNode(otherlv_1, grammarAccess.getInputObjectTypeDefinitionAccess().getInputKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_NAME
				{
					newLeafNode(lv_name_2_0, grammarAccess.getInputObjectTypeDefinitionAccess().getNameNAMETerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInputObjectTypeDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"io.github.katmatt.graphql.GraphQL.NAME");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getInputObjectTypeDefinitionAccess().getDirectivesDirectiveParserRuleCall_3_0());
				}
				lv_directives_3_0=ruleDirective
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInputObjectTypeDefinitionRule());
					}
					add(
						$current,
						"directives",
						lv_directives_3_0,
						"io.github.katmatt.graphql.GraphQL.Directive");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_4='{'
			{
				newLeafNode(otherlv_4, grammarAccess.getInputObjectTypeDefinitionAccess().getLeftCurlyBracketKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInputObjectTypeDefinitionAccess().getInputFieldsDefinitionInputValueDefinitionParserRuleCall_4_1_0());
					}
					lv_inputFieldsDefinition_5_0=ruleInputValueDefinition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInputObjectTypeDefinitionRule());
						}
						add(
							$current,
							"inputFieldsDefinition",
							lv_inputFieldsDefinition_5_0,
							"io.github.katmatt.graphql.GraphQL.InputValueDefinition");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_6='}'
			{
				newLeafNode(otherlv_6, grammarAccess.getInputObjectTypeDefinitionAccess().getRightCurlyBracketKeyword_4_2());
			}
		)?
	)
;

// Entry rule entryRuleInputValueDefinition
entryRuleInputValueDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInputValueDefinitionRule()); }
	iv_ruleInputValueDefinition=ruleInputValueDefinition
	{ $current=$iv_ruleInputValueDefinition.current; }
	EOF;

// Rule InputValueDefinition
ruleInputValueDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getInputValueDefinitionAccess().getDescriptionStringValueParserRuleCall_0_0());
				}
				lv_description_0_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInputValueDefinitionRule());
					}
					set(
						$current,
						"description",
						lv_description_0_0,
						"io.github.katmatt.graphql.GraphQL.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_name_1_0=RULE_NAME
				{
					newLeafNode(lv_name_1_0, grammarAccess.getInputValueDefinitionAccess().getNameNAMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInputValueDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"io.github.katmatt.graphql.GraphQL.NAME");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getInputValueDefinitionAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInputValueDefinitionAccess().getTypeTypeParserRuleCall_3_0());
				}
				lv_type_3_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInputValueDefinitionRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"io.github.katmatt.graphql.GraphQL.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='='
			{
				newLeafNode(otherlv_4, grammarAccess.getInputValueDefinitionAccess().getEqualsSignKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInputValueDefinitionAccess().getDefaultValueConstValueParserRuleCall_4_1_0());
					}
					lv_defaultValue_5_0=ruleConstValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInputValueDefinitionRule());
						}
						set(
							$current,
							"defaultValue",
							lv_defaultValue_5_0,
							"io.github.katmatt.graphql.GraphQL.ConstValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeAccess().getNamedTypeParserRuleCall_0());
		}
		this_NamedType_0=ruleNamedType
		{
			$current = $this_NamedType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getListTypeParserRuleCall_1());
		}
		this_ListType_1=ruleListType
		{
			$current = $this_ListType_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNamedType
entryRuleNamedType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNamedTypeRule()); }
	iv_ruleNamedType=ruleNamedType
	{ $current=$iv_ruleNamedType.current; }
	EOF;

// Rule NamedType
ruleNamedType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNamedTypeRule());
					}
				}
				otherlv_0=RULE_NAME
				{
					newLeafNode(otherlv_0, grammarAccess.getNamedTypeAccess().getTypeDefinitionTypeDefinitionCrossReference_0_0());
				}
			)
		)
		(
			(
				lv_nonNull_1_0='!'
				{
					newLeafNode(lv_nonNull_1_0, grammarAccess.getNamedTypeAccess().getNonNullExclamationMarkKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNamedTypeRule());
					}
					setWithLastConsumed($current, "nonNull", lv_nonNull_1_0 != null, "!");
				}
			)
		)?
	)
;

// Entry rule entryRuleListType
entryRuleListType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListTypeRule()); }
	iv_ruleListType=ruleListType
	{ $current=$iv_ruleListType.current; }
	EOF;

// Rule ListType
ruleListType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getListTypeAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getListTypeAccess().getTypeTypeParserRuleCall_1_0());
				}
				lv_type_1_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListTypeRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"io.github.katmatt.graphql.GraphQL.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=']'
		{
			newLeafNode(otherlv_2, grammarAccess.getListTypeAccess().getRightSquareBracketKeyword_2());
		}
		(
			(
				lv_nonNull_3_0='!'
				{
					newLeafNode(lv_nonNull_3_0, grammarAccess.getListTypeAccess().getNonNullExclamationMarkKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getListTypeRule());
					}
					setWithLastConsumed($current, "nonNull", lv_nonNull_3_0 != null, "!");
				}
			)
		)?
	)
;

// Entry rule entryRuleIntValue
entryRuleIntValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntValueRule()); }
	iv_ruleIntValue=ruleIntValue
	{ $current=$iv_ruleIntValue.current; }
	EOF;

// Rule IntValue
ruleIntValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_INT_VALUE
			{
				newLeafNode(lv_value_0_0, grammarAccess.getIntValueAccess().getValueINT_VALUETerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIntValueRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"io.github.katmatt.graphql.GraphQL.INT_VALUE");
			}
		)
	)
;

// Entry rule entryRuleFloatValue
entryRuleFloatValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFloatValueRule()); }
	iv_ruleFloatValue=ruleFloatValue
	{ $current=$iv_ruleFloatValue.current; }
	EOF;

// Rule FloatValue
ruleFloatValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_FLOAT_VALUE
			{
				newLeafNode(lv_value_0_0, grammarAccess.getFloatValueAccess().getValueFLOAT_VALUETerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getFloatValueRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"io.github.katmatt.graphql.GraphQL.FLOAT_VALUE");
			}
		)
	)
;

// Entry rule entryRuleNullValue
entryRuleNullValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNullValueRule()); }
	iv_ruleNullValue=ruleNullValue
	{ $current=$iv_ruleNullValue.current; }
	EOF;

// Rule NullValue
ruleNullValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0='null'
			{
				newLeafNode(lv_value_0_0, grammarAccess.getNullValueAccess().getValueNullKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getNullValueRule());
				}
				setWithLastConsumed($current, "value", lv_value_0_0, "null");
			}
		)
	)
;

// Entry rule entryRuleStringValue
entryRuleStringValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringValueRule()); }
	iv_ruleStringValue=ruleStringValue
	{ $current=$iv_ruleStringValue.current; }
	EOF;

// Rule StringValue
ruleStringValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_1=RULE_SL_STRING_VALUE
				{
					newLeafNode(lv_value_0_1, grammarAccess.getStringValueAccess().getValueSL_STRING_VALUETerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStringValueRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_0_1,
						"io.github.katmatt.graphql.GraphQL.SL_STRING_VALUE");
				}
				    |
				lv_value_0_2=RULE_ML_STRING_VALUE
				{
					newLeafNode(lv_value_0_2, grammarAccess.getStringValueAccess().getValueML_STRING_VALUETerminalRuleCall_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStringValueRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_0_2,
						"io.github.katmatt.graphql.GraphQL.ML_STRING_VALUE");
				}
			)
		)
	)
;

// Entry rule entryRuleBooleanValue
entryRuleBooleanValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanValueRule()); }
	iv_ruleBooleanValue=ruleBooleanValue
	{ $current=$iv_ruleBooleanValue.current; }
	EOF;

// Rule BooleanValue
ruleBooleanValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_1='true'
				{
					newLeafNode(lv_value_0_1, grammarAccess.getBooleanValueAccess().getValueTrueKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanValueRule());
					}
					setWithLastConsumed($current, "value", lv_value_0_1, null);
				}
				    |
				lv_value_0_2='false'
				{
					newLeafNode(lv_value_0_2, grammarAccess.getBooleanValueAccess().getValueFalseKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanValueRule());
					}
					setWithLastConsumed($current, "value", lv_value_0_2, null);
				}
			)
		)
	)
;

// Entry rule entryRuleEnumValue
entryRuleEnumValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumValueRule()); }
	iv_ruleEnumValue=ruleEnumValue
	{ $current=$iv_ruleEnumValue.current; }
	EOF;

// Rule EnumValue
ruleEnumValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getEnumValueRule());
				}
			}
			otherlv_0=RULE_NAME
			{
				newLeafNode(otherlv_0, grammarAccess.getEnumValueAccess().getValueEnumValueDefinitionCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleObjectValue
entryRuleObjectValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectValueRule()); }
	iv_ruleObjectValue=ruleObjectValue
	{ $current=$iv_ruleObjectValue.current; }
	EOF;

// Rule ObjectValue
ruleObjectValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getObjectValueAccess().getObjectValueAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getObjectValueAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectValueAccess().getFieldsObjectFieldParserRuleCall_2_0());
				}
				lv_fields_2_0=ruleObjectField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectValueRule());
					}
					add(
						$current,
						"fields",
						lv_fields_2_0,
						"io.github.katmatt.graphql.GraphQL.ObjectField");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getObjectValueAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleObjectField
entryRuleObjectField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectFieldRule()); }
	iv_ruleObjectField=ruleObjectField
	{ $current=$iv_ruleObjectField.current; }
	EOF;

// Rule ObjectField
ruleObjectField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjectFieldRule());
					}
				}
				otherlv_0=RULE_NAME
				{
					newLeafNode(otherlv_0, grammarAccess.getObjectFieldAccess().getFieldDefinitionFieldDefinitionCrossReference_0_0());
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getObjectFieldAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectFieldAccess().getValueConstValueParserRuleCall_2_0());
				}
				lv_value_2_0=ruleConstValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectFieldRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"io.github.katmatt.graphql.GraphQL.ConstValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleConstValue
entryRuleConstValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstValueRule()); }
	iv_ruleConstValue=ruleConstValue
	{ $current=$iv_ruleConstValue.current; }
	EOF;

// Rule ConstValue
ruleConstValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConstValueAccess().getIntValueParserRuleCall_0());
		}
		this_IntValue_0=ruleIntValue
		{
			$current = $this_IntValue_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstValueAccess().getFloatValueParserRuleCall_1());
		}
		this_FloatValue_1=ruleFloatValue
		{
			$current = $this_FloatValue_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstValueAccess().getBooleanValueParserRuleCall_2());
		}
		this_BooleanValue_2=ruleBooleanValue
		{
			$current = $this_BooleanValue_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstValueAccess().getNullValueParserRuleCall_3());
		}
		this_NullValue_3=ruleNullValue
		{
			$current = $this_NullValue_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstValueAccess().getStringValueParserRuleCall_4());
		}
		this_StringValue_4=ruleStringValue
		{
			$current = $this_StringValue_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstValueAccess().getEnumValueParserRuleCall_5());
		}
		this_EnumValue_5=ruleEnumValue
		{
			$current = $this_EnumValue_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstValueAccess().getListValueParserRuleCall_6());
		}
		this_ListValue_6=ruleListValue
		{
			$current = $this_ListValue_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstValueAccess().getObjectValueParserRuleCall_7());
		}
		this_ObjectValue_7=ruleObjectValue
		{
			$current = $this_ObjectValue_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleListValue
entryRuleListValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListValueRule()); }
	iv_ruleListValue=ruleListValue
	{ $current=$iv_ruleListValue.current; }
	EOF;

// Rule ListValue
ruleListValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getListValueAccess().getListValueAction_0(),
					$current);
			}
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getListValueAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getListValueAccess().getValuesConstValueParserRuleCall_2_0());
				}
				lv_values_2_0=ruleConstValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListValueRule());
					}
					add(
						$current,
						"values",
						lv_values_2_0,
						"io.github.katmatt.graphql.GraphQL.ConstValue");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getListValueAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleDirectiveDefinition
entryRuleDirectiveDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDirectiveDefinitionRule()); }
	iv_ruleDirectiveDefinition=ruleDirectiveDefinition
	{ $current=$iv_ruleDirectiveDefinition.current; }
	EOF;

// Rule DirectiveDefinition
ruleDirectiveDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDirectiveDefinitionAccess().getDescriptionStringValueParserRuleCall_0_0());
				}
				lv_description_0_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDirectiveDefinitionRule());
					}
					set(
						$current,
						"description",
						lv_description_0_0,
						"io.github.katmatt.graphql.GraphQL.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1='directive'
		{
			newLeafNode(otherlv_1, grammarAccess.getDirectiveDefinitionAccess().getDirectiveKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_DIRECTIVE_NAME
				{
					newLeafNode(lv_name_2_0, grammarAccess.getDirectiveDefinitionAccess().getNameDIRECTIVE_NAMETerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDirectiveDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"io.github.katmatt.graphql.GraphQL.DIRECTIVE_NAME");
				}
			)
		)
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getDirectiveDefinitionAccess().getLeftParenthesisKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectiveDefinitionAccess().getArgumentsDefinitionInputValueDefinitionParserRuleCall_3_1_0());
					}
					lv_argumentsDefinition_4_0=ruleInputValueDefinition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectiveDefinitionRule());
						}
						add(
							$current,
							"argumentsDefinition",
							lv_argumentsDefinition_4_0,
							"io.github.katmatt.graphql.GraphQL.InputValueDefinition");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getDirectiveDefinitionAccess().getRightParenthesisKeyword_3_2());
			}
		)?
		(
			(
				lv_repeatable_6_0='repeatable'
				{
					newLeafNode(lv_repeatable_6_0, grammarAccess.getDirectiveDefinitionAccess().getRepeatableRepeatableKeyword_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDirectiveDefinitionRule());
					}
					setWithLastConsumed($current, "repeatable", lv_repeatable_6_0 != null, "repeatable");
				}
			)
		)?
		otherlv_7='on'
		{
			newLeafNode(otherlv_7, grammarAccess.getDirectiveDefinitionAccess().getOnKeyword_5());
		}
		(
			otherlv_8='|'
			{
				newLeafNode(otherlv_8, grammarAccess.getDirectiveDefinitionAccess().getVerticalLineKeyword_6());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getDirectiveDefinitionAccess().getDirectiveLocationsDirectiveLocationEnumRuleCall_7_0());
				}
				lv_directiveLocations_9_0=ruleDirectiveLocation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDirectiveDefinitionRule());
					}
					add(
						$current,
						"directiveLocations",
						lv_directiveLocations_9_0,
						"io.github.katmatt.graphql.GraphQL.DirectiveLocation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_10='|'
			{
				newLeafNode(otherlv_10, grammarAccess.getDirectiveDefinitionAccess().getVerticalLineKeyword_8_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectiveDefinitionAccess().getDirectiveLocationsDirectiveLocationEnumRuleCall_8_1_0());
					}
					lv_directiveLocations_11_0=ruleDirectiveLocation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectiveDefinitionRule());
						}
						add(
							$current,
							"directiveLocations",
							lv_directiveLocations_11_0,
							"io.github.katmatt.graphql.GraphQL.DirectiveLocation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleDirective
entryRuleDirective returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDirectiveRule()); }
	iv_ruleDirective=ruleDirective
	{ $current=$iv_ruleDirective.current; }
	EOF;

// Rule Directive
ruleDirective returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDirectiveRule());
					}
				}
				otherlv_0=RULE_DIRECTIVE_NAME
				{
					newLeafNode(otherlv_0, grammarAccess.getDirectiveAccess().getDirectiveDirectiveDefinitionCrossReference_0_0());
				}
			)
		)
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getDirectiveAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDirectiveAccess().getArgumentsArgumentParserRuleCall_1_1_0());
					}
					lv_arguments_2_0=ruleArgument
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDirectiveRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_2_0,
							"io.github.katmatt.graphql.GraphQL.Argument");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getDirectiveAccess().getRightParenthesisKeyword_1_2());
			}
		)?
	)
;

// Entry rule entryRuleArgument
entryRuleArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArgumentRule()); }
	iv_ruleArgument=ruleArgument
	{ $current=$iv_ruleArgument.current; }
	EOF;

// Rule Argument
ruleArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArgumentRule());
					}
				}
				otherlv_0=RULE_NAME
				{
					newLeafNode(otherlv_0, grammarAccess.getArgumentAccess().getArgumentDefinitionInputValueDefinitionCrossReference_0_0());
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getArgumentAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArgumentAccess().getValueConstValueParserRuleCall_2_0());
				}
				lv_value_2_0=ruleConstValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArgumentRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"io.github.katmatt.graphql.GraphQL.ConstValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Rule DirectiveLocation
ruleDirectiveLocation returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='QUERY'
			{
				$current = grammarAccess.getDirectiveLocationAccess().getQUERYEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getDirectiveLocationAccess().getQUERYEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='MUTATION'
			{
				$current = grammarAccess.getDirectiveLocationAccess().getMUTATIONEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getDirectiveLocationAccess().getMUTATIONEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='SUBSCRIPTION'
			{
				$current = grammarAccess.getDirectiveLocationAccess().getSUBSCRIPTIONEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getDirectiveLocationAccess().getSUBSCRIPTIONEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='FIELD'
			{
				$current = grammarAccess.getDirectiveLocationAccess().getFIELDEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getDirectiveLocationAccess().getFIELDEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='FRAGMENT_DEFINITION'
			{
				$current = grammarAccess.getDirectiveLocationAccess().getFRAGMENT_DEFINITIONEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getDirectiveLocationAccess().getFRAGMENT_DEFINITIONEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='FRAGMENT_SPREAD'
			{
				$current = grammarAccess.getDirectiveLocationAccess().getFRAGMENT_SPREADEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getDirectiveLocationAccess().getFRAGMENT_SPREADEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='INLINE_FRAGMENT'
			{
				$current = grammarAccess.getDirectiveLocationAccess().getINLINE_FRAGMENTEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getDirectiveLocationAccess().getINLINE_FRAGMENTEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='VARIABLE_DEFINITION'
			{
				$current = grammarAccess.getDirectiveLocationAccess().getVARIABLE_DEFINITIONEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getDirectiveLocationAccess().getVARIABLE_DEFINITIONEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='SCHEMA'
			{
				$current = grammarAccess.getDirectiveLocationAccess().getSCHEMAEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getDirectiveLocationAccess().getSCHEMAEnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='SCALAR'
			{
				$current = grammarAccess.getDirectiveLocationAccess().getSCALAREnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getDirectiveLocationAccess().getSCALAREnumLiteralDeclaration_9());
			}
		)
		    |
		(
			enumLiteral_10='OBJECT'
			{
				$current = grammarAccess.getDirectiveLocationAccess().getOBJECTEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_10, grammarAccess.getDirectiveLocationAccess().getOBJECTEnumLiteralDeclaration_10());
			}
		)
		    |
		(
			enumLiteral_11='FIELD_DEFINITION'
			{
				$current = grammarAccess.getDirectiveLocationAccess().getFIELD_DEFINITIONEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_11, grammarAccess.getDirectiveLocationAccess().getFIELD_DEFINITIONEnumLiteralDeclaration_11());
			}
		)
		    |
		(
			enumLiteral_12='ARGUMENT_DEFINITION'
			{
				$current = grammarAccess.getDirectiveLocationAccess().getARGUMENT_DEFINITIONEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_12, grammarAccess.getDirectiveLocationAccess().getARGUMENT_DEFINITIONEnumLiteralDeclaration_12());
			}
		)
		    |
		(
			enumLiteral_13='INTERFACE'
			{
				$current = grammarAccess.getDirectiveLocationAccess().getINTERFACEEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_13, grammarAccess.getDirectiveLocationAccess().getINTERFACEEnumLiteralDeclaration_13());
			}
		)
		    |
		(
			enumLiteral_14='UNION'
			{
				$current = grammarAccess.getDirectiveLocationAccess().getUNIONEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_14, grammarAccess.getDirectiveLocationAccess().getUNIONEnumLiteralDeclaration_14());
			}
		)
		    |
		(
			enumLiteral_15='ENUM'
			{
				$current = grammarAccess.getDirectiveLocationAccess().getENUMEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_15, grammarAccess.getDirectiveLocationAccess().getENUMEnumLiteralDeclaration_15());
			}
		)
		    |
		(
			enumLiteral_16='ENUM_VALUE'
			{
				$current = grammarAccess.getDirectiveLocationAccess().getENUM_VALUEEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_16, grammarAccess.getDirectiveLocationAccess().getENUM_VALUEEnumLiteralDeclaration_16());
			}
		)
		    |
		(
			enumLiteral_17='INPUT_OBJECT'
			{
				$current = grammarAccess.getDirectiveLocationAccess().getINPUT_OBJECTEnumLiteralDeclaration_17().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_17, grammarAccess.getDirectiveLocationAccess().getINPUT_OBJECTEnumLiteralDeclaration_17());
			}
		)
		    |
		(
			enumLiteral_18='INPUT_FIELD_DEFINITION'
			{
				$current = grammarAccess.getDirectiveLocationAccess().getINPUT_FIELD_DEFINITIONEnumLiteralDeclaration_18().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_18, grammarAccess.getDirectiveLocationAccess().getINPUT_FIELD_DEFINITIONEnumLiteralDeclaration_18());
			}
		)
	)
;

// Rule OperationType
ruleOperationType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='query'
			{
				$current = grammarAccess.getOperationTypeAccess().getQUERYEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getOperationTypeAccess().getQUERYEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='mutation'
			{
				$current = grammarAccess.getOperationTypeAccess().getMUTATIONEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getOperationTypeAccess().getMUTATIONEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='subscription'
			{
				$current = grammarAccess.getOperationTypeAccess().getSUBSCRIPTIONEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getOperationTypeAccess().getSUBSCRIPTIONEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_DIRECTIVE_NAME : '@' RULE_NAME;

RULE_NAME : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT_VALUE : '-'? '1'..'9' ('0'..'9')*;

RULE_FLOAT_VALUE : '-'? ('0'|('1'..'9')*) '.' ('0'..'9')* ('e'|'E') ('+'|'-')? ('0'..'9')*;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_SL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_COMMA : ',';

RULE_SL_STRING_VALUE : '"' RULE_STRING_CHARACTER* '"';

RULE_ML_STRING_VALUE : '"""' ( options {greedy=false;} : . )*'"""';

fragment RULE_STRING_CHARACTER : ~(('\n'|'\r'|'"'|'\\'));
