/**
 * generated by Xtext 2.23.0
 */
package io.github.katmatt.graphql.graphQL.impl;

import io.github.katmatt.graphql.graphQL.GraphQLPackage;
import io.github.katmatt.graphql.graphQL.OperationType;
import io.github.katmatt.graphql.graphQL.RootOperationTypeDefinition;
import io.github.katmatt.graphql.graphQL.TypeDefinition;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Root Operation Type Definition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link io.github.katmatt.graphql.graphQL.impl.RootOperationTypeDefinitionImpl#getOperationType <em>Operation Type</em>}</li>
 *   <li>{@link io.github.katmatt.graphql.graphQL.impl.RootOperationTypeDefinitionImpl#getType <em>Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RootOperationTypeDefinitionImpl extends MinimalEObjectImpl.Container implements RootOperationTypeDefinition
{
  /**
   * The default value of the '{@link #getOperationType() <em>Operation Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperationType()
   * @generated
   * @ordered
   */
  protected static final OperationType OPERATION_TYPE_EDEFAULT = OperationType.QUERY;

  /**
   * The cached value of the '{@link #getOperationType() <em>Operation Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperationType()
   * @generated
   * @ordered
   */
  protected OperationType operationType = OPERATION_TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected TypeDefinition type;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RootOperationTypeDefinitionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GraphQLPackage.Literals.ROOT_OPERATION_TYPE_DEFINITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationType getOperationType()
  {
    return operationType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOperationType(OperationType newOperationType)
  {
    OperationType oldOperationType = operationType;
    operationType = newOperationType == null ? OPERATION_TYPE_EDEFAULT : newOperationType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GraphQLPackage.ROOT_OPERATION_TYPE_DEFINITION__OPERATION_TYPE, oldOperationType, operationType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeDefinition getType()
  {
    if (type != null && type.eIsProxy())
    {
      InternalEObject oldType = (InternalEObject)type;
      type = (TypeDefinition)eResolveProxy(oldType);
      if (type != oldType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, GraphQLPackage.ROOT_OPERATION_TYPE_DEFINITION__TYPE, oldType, type));
      }
    }
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeDefinition basicGetType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(TypeDefinition newType)
  {
    TypeDefinition oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GraphQLPackage.ROOT_OPERATION_TYPE_DEFINITION__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GraphQLPackage.ROOT_OPERATION_TYPE_DEFINITION__OPERATION_TYPE:
        return getOperationType();
      case GraphQLPackage.ROOT_OPERATION_TYPE_DEFINITION__TYPE:
        if (resolve) return getType();
        return basicGetType();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GraphQLPackage.ROOT_OPERATION_TYPE_DEFINITION__OPERATION_TYPE:
        setOperationType((OperationType)newValue);
        return;
      case GraphQLPackage.ROOT_OPERATION_TYPE_DEFINITION__TYPE:
        setType((TypeDefinition)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GraphQLPackage.ROOT_OPERATION_TYPE_DEFINITION__OPERATION_TYPE:
        setOperationType(OPERATION_TYPE_EDEFAULT);
        return;
      case GraphQLPackage.ROOT_OPERATION_TYPE_DEFINITION__TYPE:
        setType((TypeDefinition)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GraphQLPackage.ROOT_OPERATION_TYPE_DEFINITION__OPERATION_TYPE:
        return operationType != OPERATION_TYPE_EDEFAULT;
      case GraphQLPackage.ROOT_OPERATION_TYPE_DEFINITION__TYPE:
        return type != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (operationType: ");
    result.append(operationType);
    result.append(')');
    return result.toString();
  }

} //RootOperationTypeDefinitionImpl
