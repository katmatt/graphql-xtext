/**
 * generated by Xtext 2.23.0
 */
package io.github.katmatt.graphql.graphQL.impl;

import io.github.katmatt.graphql.graphQL.GraphQLPackage;
import io.github.katmatt.graphql.graphQL.TypeDefinition;
import io.github.katmatt.graphql.graphQL.UnionTypeDefinition;

import java.util.Collection;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Union Type Definition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link io.github.katmatt.graphql.graphQL.impl.UnionTypeDefinitionImpl#getMemberTypes <em>Member Types</em>}</li>
 * </ul>
 *
 * @generated
 */
public class UnionTypeDefinitionImpl extends TypeDefinitionImpl implements UnionTypeDefinition
{
  /**
   * The cached value of the '{@link #getMemberTypes() <em>Member Types</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMemberTypes()
   * @generated
   * @ordered
   */
  protected EList<TypeDefinition> memberTypes;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UnionTypeDefinitionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GraphQLPackage.Literals.UNION_TYPE_DEFINITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<TypeDefinition> getMemberTypes()
  {
    if (memberTypes == null)
    {
      memberTypes = new EObjectResolvingEList<TypeDefinition>(TypeDefinition.class, this, GraphQLPackage.UNION_TYPE_DEFINITION__MEMBER_TYPES);
    }
    return memberTypes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GraphQLPackage.UNION_TYPE_DEFINITION__MEMBER_TYPES:
        return getMemberTypes();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GraphQLPackage.UNION_TYPE_DEFINITION__MEMBER_TYPES:
        getMemberTypes().clear();
        getMemberTypes().addAll((Collection<? extends TypeDefinition>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GraphQLPackage.UNION_TYPE_DEFINITION__MEMBER_TYPES:
        getMemberTypes().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GraphQLPackage.UNION_TYPE_DEFINITION__MEMBER_TYPES:
        return memberTypes != null && !memberTypes.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //UnionTypeDefinitionImpl
