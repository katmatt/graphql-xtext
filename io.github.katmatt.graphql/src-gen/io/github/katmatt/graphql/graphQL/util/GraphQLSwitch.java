/**
 * generated by Xtext 2.23.0
 */
package io.github.katmatt.graphql.graphQL.util;

import io.github.katmatt.graphql.graphQL.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see io.github.katmatt.graphql.graphQL.GraphQLPackage
 * @generated
 */
public class GraphQLSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static GraphQLPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GraphQLSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = GraphQLPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case GraphQLPackage.TYPE_SYSTEM_DEFINITION:
      {
        TypeSystemDefinition typeSystemDefinition = (TypeSystemDefinition)theEObject;
        T result = caseTypeSystemDefinition(typeSystemDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GraphQLPackage.SCHEMA_DEFINITION:
      {
        SchemaDefinition schemaDefinition = (SchemaDefinition)theEObject;
        T result = caseSchemaDefinition(schemaDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GraphQLPackage.ROOT_OPERATION_TYPE_DEFINITION:
      {
        RootOperationTypeDefinition rootOperationTypeDefinition = (RootOperationTypeDefinition)theEObject;
        T result = caseRootOperationTypeDefinition(rootOperationTypeDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GraphQLPackage.TYPE_DEFINITION:
      {
        TypeDefinition typeDefinition = (TypeDefinition)theEObject;
        T result = caseTypeDefinition(typeDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GraphQLPackage.SCALAR_TYPE_DEFINITION:
      {
        ScalarTypeDefinition scalarTypeDefinition = (ScalarTypeDefinition)theEObject;
        T result = caseScalarTypeDefinition(scalarTypeDefinition);
        if (result == null) result = caseTypeDefinition(scalarTypeDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GraphQLPackage.OBJECT_TYPE_DEFINITION:
      {
        ObjectTypeDefinition objectTypeDefinition = (ObjectTypeDefinition)theEObject;
        T result = caseObjectTypeDefinition(objectTypeDefinition);
        if (result == null) result = caseTypeDefinition(objectTypeDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GraphQLPackage.INTERFACE_DEFINITION:
      {
        InterfaceDefinition interfaceDefinition = (InterfaceDefinition)theEObject;
        T result = caseInterfaceDefinition(interfaceDefinition);
        if (result == null) result = caseTypeDefinition(interfaceDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GraphQLPackage.FIELD_DEFINITION:
      {
        FieldDefinition fieldDefinition = (FieldDefinition)theEObject;
        T result = caseFieldDefinition(fieldDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GraphQLPackage.UNION_TYPE_DEFINITION:
      {
        UnionTypeDefinition unionTypeDefinition = (UnionTypeDefinition)theEObject;
        T result = caseUnionTypeDefinition(unionTypeDefinition);
        if (result == null) result = caseTypeDefinition(unionTypeDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GraphQLPackage.ENUM_TYPE_DEFINITION:
      {
        EnumTypeDefinition enumTypeDefinition = (EnumTypeDefinition)theEObject;
        T result = caseEnumTypeDefinition(enumTypeDefinition);
        if (result == null) result = caseTypeDefinition(enumTypeDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GraphQLPackage.ENUM_VALUE_DEFINITION:
      {
        EnumValueDefinition enumValueDefinition = (EnumValueDefinition)theEObject;
        T result = caseEnumValueDefinition(enumValueDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GraphQLPackage.INPUT_OBJECT_TYPE_DEFINITION:
      {
        InputObjectTypeDefinition inputObjectTypeDefinition = (InputObjectTypeDefinition)theEObject;
        T result = caseInputObjectTypeDefinition(inputObjectTypeDefinition);
        if (result == null) result = caseTypeDefinition(inputObjectTypeDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type System Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type System Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeSystemDefinition(TypeSystemDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Schema Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Schema Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSchemaDefinition(SchemaDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Root Operation Type Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Root Operation Type Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRootOperationTypeDefinition(RootOperationTypeDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeDefinition(TypeDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Scalar Type Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Scalar Type Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseScalarTypeDefinition(ScalarTypeDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Object Type Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Object Type Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseObjectTypeDefinition(ObjectTypeDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Interface Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Interface Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInterfaceDefinition(InterfaceDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Field Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Field Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFieldDefinition(FieldDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Union Type Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Union Type Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnionTypeDefinition(UnionTypeDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enum Type Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enum Type Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumTypeDefinition(EnumTypeDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enum Value Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enum Value Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumValueDefinition(EnumValueDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Input Object Type Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Input Object Type Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInputObjectTypeDefinition(InputObjectTypeDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //GraphQLSwitch
