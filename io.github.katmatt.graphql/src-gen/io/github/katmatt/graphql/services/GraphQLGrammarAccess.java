/*
 * generated by Xtext 2.23.0
 */
package io.github.katmatt.graphql.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GraphQLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class TypeSystemDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.TypeSystemDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSchemaDefinitionsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSchemaDefinitionsSchemaDefinitionParserRuleCall_0_0 = (RuleCall)cSchemaDefinitionsAssignment_0.eContents().get(0);
		private final Assignment cTypeDefinitionsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypeDefinitionsTypeDefinitionParserRuleCall_1_0 = (RuleCall)cTypeDefinitionsAssignment_1.eContents().get(0);
		private final Assignment cDirectiveDefinitionsAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cDirectiveDefinitionsDirectiveDefinitionParserRuleCall_2_0 = (RuleCall)cDirectiveDefinitionsAssignment_2.eContents().get(0);
		
		//TypeSystemDefinition:
		//	(schemaDefinitions+=SchemaDefinition | typeDefinitions+=TypeDefinition | directiveDefinitions+=DirectiveDefinition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(schemaDefinitions+=SchemaDefinition | typeDefinitions+=TypeDefinition | directiveDefinitions+=DirectiveDefinition)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//schemaDefinitions+=SchemaDefinition
		public Assignment getSchemaDefinitionsAssignment_0() { return cSchemaDefinitionsAssignment_0; }
		
		//SchemaDefinition
		public RuleCall getSchemaDefinitionsSchemaDefinitionParserRuleCall_0_0() { return cSchemaDefinitionsSchemaDefinitionParserRuleCall_0_0; }
		
		//typeDefinitions+=TypeDefinition
		public Assignment getTypeDefinitionsAssignment_1() { return cTypeDefinitionsAssignment_1; }
		
		//TypeDefinition
		public RuleCall getTypeDefinitionsTypeDefinitionParserRuleCall_1_0() { return cTypeDefinitionsTypeDefinitionParserRuleCall_1_0; }
		
		//directiveDefinitions+=DirectiveDefinition
		public Assignment getDirectiveDefinitionsAssignment_2() { return cDirectiveDefinitionsAssignment_2; }
		
		//DirectiveDefinition
		public RuleCall getDirectiveDefinitionsDirectiveDefinitionParserRuleCall_2_0() { return cDirectiveDefinitionsDirectiveDefinitionParserRuleCall_2_0; }
	}
	public class SchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.SchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionStringValueParserRuleCall_0_0 = (RuleCall)cDescriptionAssignment_0.eContents().get(0);
		private final Keyword cSchemaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeDefinitionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeDefinitionsRootOperationTypeDefinitionParserRuleCall_3_0 = (RuleCall)cTypeDefinitionsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SchemaDefinition:
		//	description=StringValue? "schema" "{" typeDefinitions+=RootOperationTypeDefinition+ "}";
		@Override public ParserRule getRule() { return rule; }
		
		//description=StringValue? "schema" "{" typeDefinitions+=RootOperationTypeDefinition+ "}"
		public Group getGroup() { return cGroup; }
		
		//description=StringValue?
		public Assignment getDescriptionAssignment_0() { return cDescriptionAssignment_0; }
		
		//StringValue
		public RuleCall getDescriptionStringValueParserRuleCall_0_0() { return cDescriptionStringValueParserRuleCall_0_0; }
		
		//"schema"
		public Keyword getSchemaKeyword_1() { return cSchemaKeyword_1; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//typeDefinitions+=RootOperationTypeDefinition+
		public Assignment getTypeDefinitionsAssignment_3() { return cTypeDefinitionsAssignment_3; }
		
		//RootOperationTypeDefinition
		public RuleCall getTypeDefinitionsRootOperationTypeDefinitionParserRuleCall_3_0() { return cTypeDefinitionsRootOperationTypeDefinitionParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class RootOperationTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.RootOperationTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperationTypeOperationTypeEnumRuleCall_0_0 = (RuleCall)cOperationTypeAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeTypeDefinitionCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeTypeDefinitionNAMETerminalRuleCall_2_0_1 = (RuleCall)cTypeTypeDefinitionCrossReference_2_0.eContents().get(1);
		
		//RootOperationTypeDefinition:
		//	operationType=OperationType ":" type=[TypeDefinition|NAME];
		@Override public ParserRule getRule() { return rule; }
		
		//operationType=OperationType ":" type=[TypeDefinition|NAME]
		public Group getGroup() { return cGroup; }
		
		//operationType=OperationType
		public Assignment getOperationTypeAssignment_0() { return cOperationTypeAssignment_0; }
		
		//OperationType
		public RuleCall getOperationTypeOperationTypeEnumRuleCall_0_0() { return cOperationTypeOperationTypeEnumRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=[TypeDefinition|NAME]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[TypeDefinition|NAME]
		public CrossReference getTypeTypeDefinitionCrossReference_2_0() { return cTypeTypeDefinitionCrossReference_2_0; }
		
		//NAME
		public RuleCall getTypeTypeDefinitionNAMETerminalRuleCall_2_0_1() { return cTypeTypeDefinitionNAMETerminalRuleCall_2_0_1; }
	}
	public class TypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.TypeDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cScalarTypeDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjectTypeDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInterfaceDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUnionTypeDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEnumTypeDefinitionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cInputObjectTypeDefinitionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//TypeDefinition:
		//	ScalarTypeDefinition | ObjectTypeDefinition | InterfaceDefinition | UnionTypeDefinition | EnumTypeDefinition |
		//	InputObjectTypeDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//ScalarTypeDefinition | ObjectTypeDefinition | InterfaceDefinition | UnionTypeDefinition | EnumTypeDefinition |
		//InputObjectTypeDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ScalarTypeDefinition
		public RuleCall getScalarTypeDefinitionParserRuleCall_0() { return cScalarTypeDefinitionParserRuleCall_0; }
		
		//ObjectTypeDefinition
		public RuleCall getObjectTypeDefinitionParserRuleCall_1() { return cObjectTypeDefinitionParserRuleCall_1; }
		
		//InterfaceDefinition
		public RuleCall getInterfaceDefinitionParserRuleCall_2() { return cInterfaceDefinitionParserRuleCall_2; }
		
		//UnionTypeDefinition
		public RuleCall getUnionTypeDefinitionParserRuleCall_3() { return cUnionTypeDefinitionParserRuleCall_3; }
		
		//EnumTypeDefinition
		public RuleCall getEnumTypeDefinitionParserRuleCall_4() { return cEnumTypeDefinitionParserRuleCall_4; }
		
		//InputObjectTypeDefinition
		public RuleCall getInputObjectTypeDefinitionParserRuleCall_5() { return cInputObjectTypeDefinitionParserRuleCall_5; }
	}
	public class ScalarTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.ScalarTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionStringValueParserRuleCall_0_0 = (RuleCall)cDescriptionAssignment_0.eContents().get(0);
		private final Keyword cScalarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNAMETerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cDirectivesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDirectivesDirectiveParserRuleCall_3_0 = (RuleCall)cDirectivesAssignment_3.eContents().get(0);
		
		//ScalarTypeDefinition:
		//	description=StringValue? "scalar" name=NAME
		//	directives+=Directive*;
		@Override public ParserRule getRule() { return rule; }
		
		//description=StringValue? "scalar" name=NAME directives+=Directive*
		public Group getGroup() { return cGroup; }
		
		//description=StringValue?
		public Assignment getDescriptionAssignment_0() { return cDescriptionAssignment_0; }
		
		//StringValue
		public RuleCall getDescriptionStringValueParserRuleCall_0_0() { return cDescriptionStringValueParserRuleCall_0_0; }
		
		//"scalar"
		public Keyword getScalarKeyword_1() { return cScalarKeyword_1; }
		
		//name=NAME
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_2_0() { return cNameNAMETerminalRuleCall_2_0; }
		
		//directives+=Directive*
		public Assignment getDirectivesAssignment_3() { return cDirectivesAssignment_3; }
		
		//Directive
		public RuleCall getDirectivesDirectiveParserRuleCall_3_0() { return cDirectivesDirectiveParserRuleCall_3_0; }
	}
	public class ObjectTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.ObjectTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionStringValueParserRuleCall_0_0 = (RuleCall)cDescriptionAssignment_0.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNAMETerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cImplementsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cAmpersandKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cImplementsInterfacesAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cImplementsInterfacesInterfaceDefinitionCrossReference_3_2_0 = (CrossReference)cImplementsInterfacesAssignment_3_2.eContents().get(0);
		private final RuleCall cImplementsInterfacesInterfaceDefinitionNAMETerminalRuleCall_3_2_0_1 = (RuleCall)cImplementsInterfacesInterfaceDefinitionCrossReference_3_2_0.eContents().get(1);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cAmpersandKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cImplementsInterfacesAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final CrossReference cImplementsInterfacesInterfaceDefinitionCrossReference_3_3_1_0 = (CrossReference)cImplementsInterfacesAssignment_3_3_1.eContents().get(0);
		private final RuleCall cImplementsInterfacesInterfaceDefinitionNAMETerminalRuleCall_3_3_1_0_1 = (RuleCall)cImplementsInterfacesInterfaceDefinitionCrossReference_3_3_1_0.eContents().get(1);
		private final Assignment cDirectivesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDirectivesDirectiveParserRuleCall_4_0 = (RuleCall)cDirectivesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cFieldDefinitionsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cFieldDefinitionsFieldDefinitionParserRuleCall_5_1_0 = (RuleCall)cFieldDefinitionsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//ObjectTypeDefinition:
		//	description=StringValue? "type" name=NAME ('implements' '&'? implementsInterfaces+=[InterfaceDefinition|NAME] ('&'
		//	implementsInterfaces+=[InterfaceDefinition|NAME])*)?
		//	directives+=Directive* ("{" fieldDefinitions+=FieldDefinition* "}")?;
		@Override public ParserRule getRule() { return rule; }
		
		//description=StringValue? "type" name=NAME ('implements' '&'? implementsInterfaces+=[InterfaceDefinition|NAME] ('&'
		//implementsInterfaces+=[InterfaceDefinition|NAME])*)? directives+=Directive* ("{" fieldDefinitions+=FieldDefinition*
		//"}")?
		public Group getGroup() { return cGroup; }
		
		//description=StringValue?
		public Assignment getDescriptionAssignment_0() { return cDescriptionAssignment_0; }
		
		//StringValue
		public RuleCall getDescriptionStringValueParserRuleCall_0_0() { return cDescriptionStringValueParserRuleCall_0_0; }
		
		//"type"
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }
		
		//name=NAME
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_2_0() { return cNameNAMETerminalRuleCall_2_0; }
		
		//('implements' '&'? implementsInterfaces+=[InterfaceDefinition|NAME] ('&'
		//implementsInterfaces+=[InterfaceDefinition|NAME])*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'implements'
		public Keyword getImplementsKeyword_3_0() { return cImplementsKeyword_3_0; }
		
		//'&'?
		public Keyword getAmpersandKeyword_3_1() { return cAmpersandKeyword_3_1; }
		
		//implementsInterfaces+=[InterfaceDefinition|NAME]
		public Assignment getImplementsInterfacesAssignment_3_2() { return cImplementsInterfacesAssignment_3_2; }
		
		//[InterfaceDefinition|NAME]
		public CrossReference getImplementsInterfacesInterfaceDefinitionCrossReference_3_2_0() { return cImplementsInterfacesInterfaceDefinitionCrossReference_3_2_0; }
		
		//NAME
		public RuleCall getImplementsInterfacesInterfaceDefinitionNAMETerminalRuleCall_3_2_0_1() { return cImplementsInterfacesInterfaceDefinitionNAMETerminalRuleCall_3_2_0_1; }
		
		//('&' implementsInterfaces+=[InterfaceDefinition|NAME])*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'&'
		public Keyword getAmpersandKeyword_3_3_0() { return cAmpersandKeyword_3_3_0; }
		
		//implementsInterfaces+=[InterfaceDefinition|NAME]
		public Assignment getImplementsInterfacesAssignment_3_3_1() { return cImplementsInterfacesAssignment_3_3_1; }
		
		//[InterfaceDefinition|NAME]
		public CrossReference getImplementsInterfacesInterfaceDefinitionCrossReference_3_3_1_0() { return cImplementsInterfacesInterfaceDefinitionCrossReference_3_3_1_0; }
		
		//NAME
		public RuleCall getImplementsInterfacesInterfaceDefinitionNAMETerminalRuleCall_3_3_1_0_1() { return cImplementsInterfacesInterfaceDefinitionNAMETerminalRuleCall_3_3_1_0_1; }
		
		//directives+=Directive*
		public Assignment getDirectivesAssignment_4() { return cDirectivesAssignment_4; }
		
		//Directive
		public RuleCall getDirectivesDirectiveParserRuleCall_4_0() { return cDirectivesDirectiveParserRuleCall_4_0; }
		
		//("{" fieldDefinitions+=FieldDefinition* "}")?
		public Group getGroup_5() { return cGroup_5; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }
		
		//fieldDefinitions+=FieldDefinition*
		public Assignment getFieldDefinitionsAssignment_5_1() { return cFieldDefinitionsAssignment_5_1; }
		
		//FieldDefinition
		public RuleCall getFieldDefinitionsFieldDefinitionParserRuleCall_5_1_0() { return cFieldDefinitionsFieldDefinitionParserRuleCall_5_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5_2() { return cRightCurlyBracketKeyword_5_2; }
	}
	public class InterfaceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.InterfaceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionStringValueParserRuleCall_0_0 = (RuleCall)cDescriptionAssignment_0.eContents().get(0);
		private final Keyword cInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNAMETerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cImplementsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cAmpersandKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cImplementsInterfacesAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cImplementsInterfacesInterfaceDefinitionCrossReference_3_2_0 = (CrossReference)cImplementsInterfacesAssignment_3_2.eContents().get(0);
		private final RuleCall cImplementsInterfacesInterfaceDefinitionNAMETerminalRuleCall_3_2_0_1 = (RuleCall)cImplementsInterfacesInterfaceDefinitionCrossReference_3_2_0.eContents().get(1);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cAmpersandKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cImplementsInterfacesAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final CrossReference cImplementsInterfacesInterfaceDefinitionCrossReference_3_3_1_0 = (CrossReference)cImplementsInterfacesAssignment_3_3_1.eContents().get(0);
		private final RuleCall cImplementsInterfacesInterfaceDefinitionNAMETerminalRuleCall_3_3_1_0_1 = (RuleCall)cImplementsInterfacesInterfaceDefinitionCrossReference_3_3_1_0.eContents().get(1);
		private final Assignment cDirectivesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDirectivesDirectiveParserRuleCall_4_0 = (RuleCall)cDirectivesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cFieldDefinitionsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cFieldDefinitionsFieldDefinitionParserRuleCall_5_1_0 = (RuleCall)cFieldDefinitionsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//InterfaceDefinition:
		//	description=StringValue? "interface" name=NAME ('implements' '&'? implementsInterfaces+=[InterfaceDefinition|NAME]
		//	('&' implementsInterfaces+=[InterfaceDefinition|NAME])*)?
		//	directives+=Directive* ("{" fieldDefinitions+=FieldDefinition* "}")?;
		@Override public ParserRule getRule() { return rule; }
		
		//description=StringValue? "interface" name=NAME ('implements' '&'? implementsInterfaces+=[InterfaceDefinition|NAME] ('&'
		//implementsInterfaces+=[InterfaceDefinition|NAME])*)? directives+=Directive* ("{" fieldDefinitions+=FieldDefinition*
		//"}")?
		public Group getGroup() { return cGroup; }
		
		//description=StringValue?
		public Assignment getDescriptionAssignment_0() { return cDescriptionAssignment_0; }
		
		//StringValue
		public RuleCall getDescriptionStringValueParserRuleCall_0_0() { return cDescriptionStringValueParserRuleCall_0_0; }
		
		//"interface"
		public Keyword getInterfaceKeyword_1() { return cInterfaceKeyword_1; }
		
		//name=NAME
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_2_0() { return cNameNAMETerminalRuleCall_2_0; }
		
		//('implements' '&'? implementsInterfaces+=[InterfaceDefinition|NAME] ('&'
		//implementsInterfaces+=[InterfaceDefinition|NAME])*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'implements'
		public Keyword getImplementsKeyword_3_0() { return cImplementsKeyword_3_0; }
		
		//'&'?
		public Keyword getAmpersandKeyword_3_1() { return cAmpersandKeyword_3_1; }
		
		//implementsInterfaces+=[InterfaceDefinition|NAME]
		public Assignment getImplementsInterfacesAssignment_3_2() { return cImplementsInterfacesAssignment_3_2; }
		
		//[InterfaceDefinition|NAME]
		public CrossReference getImplementsInterfacesInterfaceDefinitionCrossReference_3_2_0() { return cImplementsInterfacesInterfaceDefinitionCrossReference_3_2_0; }
		
		//NAME
		public RuleCall getImplementsInterfacesInterfaceDefinitionNAMETerminalRuleCall_3_2_0_1() { return cImplementsInterfacesInterfaceDefinitionNAMETerminalRuleCall_3_2_0_1; }
		
		//('&' implementsInterfaces+=[InterfaceDefinition|NAME])*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'&'
		public Keyword getAmpersandKeyword_3_3_0() { return cAmpersandKeyword_3_3_0; }
		
		//implementsInterfaces+=[InterfaceDefinition|NAME]
		public Assignment getImplementsInterfacesAssignment_3_3_1() { return cImplementsInterfacesAssignment_3_3_1; }
		
		//[InterfaceDefinition|NAME]
		public CrossReference getImplementsInterfacesInterfaceDefinitionCrossReference_3_3_1_0() { return cImplementsInterfacesInterfaceDefinitionCrossReference_3_3_1_0; }
		
		//NAME
		public RuleCall getImplementsInterfacesInterfaceDefinitionNAMETerminalRuleCall_3_3_1_0_1() { return cImplementsInterfacesInterfaceDefinitionNAMETerminalRuleCall_3_3_1_0_1; }
		
		//directives+=Directive*
		public Assignment getDirectivesAssignment_4() { return cDirectivesAssignment_4; }
		
		//Directive
		public RuleCall getDirectivesDirectiveParserRuleCall_4_0() { return cDirectivesDirectiveParserRuleCall_4_0; }
		
		//("{" fieldDefinitions+=FieldDefinition* "}")?
		public Group getGroup_5() { return cGroup_5; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }
		
		//fieldDefinitions+=FieldDefinition*
		public Assignment getFieldDefinitionsAssignment_5_1() { return cFieldDefinitionsAssignment_5_1; }
		
		//FieldDefinition
		public RuleCall getFieldDefinitionsFieldDefinitionParserRuleCall_5_1_0() { return cFieldDefinitionsFieldDefinitionParserRuleCall_5_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5_2() { return cRightCurlyBracketKeyword_5_2; }
	}
	public class FieldDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.FieldDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionStringValueParserRuleCall_0_0 = (RuleCall)cDescriptionAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArgumentsDefinitionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgumentsDefinitionInputValueDefinitionParserRuleCall_2_1_0 = (RuleCall)cArgumentsDefinitionAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		
		//FieldDefinition:
		//	description=StringValue? name=NAME ('(' argumentsDefinition+=InputValueDefinition* ')')? ":" type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//description=StringValue? name=NAME ('(' argumentsDefinition+=InputValueDefinition* ')')? ":" type=Type
		public Group getGroup() { return cGroup; }
		
		//description=StringValue?
		public Assignment getDescriptionAssignment_0() { return cDescriptionAssignment_0; }
		
		//StringValue
		public RuleCall getDescriptionStringValueParserRuleCall_0_0() { return cDescriptionStringValueParserRuleCall_0_0; }
		
		//name=NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_1_0() { return cNameNAMETerminalRuleCall_1_0; }
		
		//('(' argumentsDefinition+=InputValueDefinition* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//argumentsDefinition+=InputValueDefinition*
		public Assignment getArgumentsDefinitionAssignment_2_1() { return cArgumentsDefinitionAssignment_2_1; }
		
		//InputValueDefinition
		public RuleCall getArgumentsDefinitionInputValueDefinitionParserRuleCall_2_1_0() { return cArgumentsDefinitionInputValueDefinitionParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//type=Type
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_4_0() { return cTypeTypeParserRuleCall_4_0; }
	}
	public class UnionTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.UnionTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionStringValueParserRuleCall_0_0 = (RuleCall)cDescriptionAssignment_0.eContents().get(0);
		private final Keyword cUnionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNAMETerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cDirectivesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDirectivesDirectiveParserRuleCall_3_0 = (RuleCall)cDirectivesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cVerticalLineKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cMemberTypesAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cMemberTypesTypeParserRuleCall_4_2_0 = (RuleCall)cMemberTypesAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cVerticalLineKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cMemberTypesAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cMemberTypesTypeParserRuleCall_4_3_1_0 = (RuleCall)cMemberTypesAssignment_4_3_1.eContents().get(0);
		
		//UnionTypeDefinition:
		//	description=StringValue? "union" name=NAME
		//	directives+=Directive* ("=" "|"? memberTypes+=Type ("|" memberTypes+=Type)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//description=StringValue? "union" name=NAME directives+=Directive* ("=" "|"? memberTypes+=Type ("|" memberTypes+=Type)*)?
		public Group getGroup() { return cGroup; }
		
		//description=StringValue?
		public Assignment getDescriptionAssignment_0() { return cDescriptionAssignment_0; }
		
		//StringValue
		public RuleCall getDescriptionStringValueParserRuleCall_0_0() { return cDescriptionStringValueParserRuleCall_0_0; }
		
		//"union"
		public Keyword getUnionKeyword_1() { return cUnionKeyword_1; }
		
		//name=NAME
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_2_0() { return cNameNAMETerminalRuleCall_2_0; }
		
		//directives+=Directive*
		public Assignment getDirectivesAssignment_3() { return cDirectivesAssignment_3; }
		
		//Directive
		public RuleCall getDirectivesDirectiveParserRuleCall_3_0() { return cDirectivesDirectiveParserRuleCall_3_0; }
		
		//("=" "|"? memberTypes+=Type ("|" memberTypes+=Type)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//"="
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }
		
		//"|"?
		public Keyword getVerticalLineKeyword_4_1() { return cVerticalLineKeyword_4_1; }
		
		//memberTypes+=Type
		public Assignment getMemberTypesAssignment_4_2() { return cMemberTypesAssignment_4_2; }
		
		//Type
		public RuleCall getMemberTypesTypeParserRuleCall_4_2_0() { return cMemberTypesTypeParserRuleCall_4_2_0; }
		
		//("|" memberTypes+=Type)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//"|"
		public Keyword getVerticalLineKeyword_4_3_0() { return cVerticalLineKeyword_4_3_0; }
		
		//memberTypes+=Type
		public Assignment getMemberTypesAssignment_4_3_1() { return cMemberTypesAssignment_4_3_1; }
		
		//Type
		public RuleCall getMemberTypesTypeParserRuleCall_4_3_1_0() { return cMemberTypesTypeParserRuleCall_4_3_1_0; }
	}
	public class EnumTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.EnumTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionStringValueParserRuleCall_0_0 = (RuleCall)cDescriptionAssignment_0.eContents().get(0);
		private final Keyword cEnumKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNAMETerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cDirectivesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDirectivesDirectiveParserRuleCall_3_0 = (RuleCall)cDirectivesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEnumValuesDefinitionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEnumValuesDefinitionEnumValueDefinitionParserRuleCall_4_1_0 = (RuleCall)cEnumValuesDefinitionAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//EnumTypeDefinition:
		//	description=StringValue? "enum" name=NAME
		//	directives+=Directive* ("{" enumValuesDefinition+=EnumValueDefinition* "}")?;
		@Override public ParserRule getRule() { return rule; }
		
		//description=StringValue? "enum" name=NAME directives+=Directive* ("{" enumValuesDefinition+=EnumValueDefinition* "}")?
		public Group getGroup() { return cGroup; }
		
		//description=StringValue?
		public Assignment getDescriptionAssignment_0() { return cDescriptionAssignment_0; }
		
		//StringValue
		public RuleCall getDescriptionStringValueParserRuleCall_0_0() { return cDescriptionStringValueParserRuleCall_0_0; }
		
		//"enum"
		public Keyword getEnumKeyword_1() { return cEnumKeyword_1; }
		
		//name=NAME
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_2_0() { return cNameNAMETerminalRuleCall_2_0; }
		
		//directives+=Directive*
		public Assignment getDirectivesAssignment_3() { return cDirectivesAssignment_3; }
		
		//Directive
		public RuleCall getDirectivesDirectiveParserRuleCall_3_0() { return cDirectivesDirectiveParserRuleCall_3_0; }
		
		//("{" enumValuesDefinition+=EnumValueDefinition* "}")?
		public Group getGroup_4() { return cGroup_4; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//enumValuesDefinition+=EnumValueDefinition*
		public Assignment getEnumValuesDefinitionAssignment_4_1() { return cEnumValuesDefinitionAssignment_4_1; }
		
		//EnumValueDefinition
		public RuleCall getEnumValuesDefinitionEnumValueDefinitionParserRuleCall_4_1_0() { return cEnumValuesDefinitionEnumValueDefinitionParserRuleCall_4_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}
	public class EnumValueDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.EnumValueDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionStringValueParserRuleCall_0_0 = (RuleCall)cDescriptionAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//EnumValueDefinition:
		//	description=StringValue? name=NAME;
		@Override public ParserRule getRule() { return rule; }
		
		//description=StringValue? name=NAME
		public Group getGroup() { return cGroup; }
		
		//description=StringValue?
		public Assignment getDescriptionAssignment_0() { return cDescriptionAssignment_0; }
		
		//StringValue
		public RuleCall getDescriptionStringValueParserRuleCall_0_0() { return cDescriptionStringValueParserRuleCall_0_0; }
		
		//name=NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_1_0() { return cNameNAMETerminalRuleCall_1_0; }
	}
	public class InputObjectTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.InputObjectTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionStringValueParserRuleCall_0_0 = (RuleCall)cDescriptionAssignment_0.eContents().get(0);
		private final Keyword cInputKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNAMETerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cDirectivesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDirectivesDirectiveParserRuleCall_3_0 = (RuleCall)cDirectivesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInputFieldsDefinitionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInputFieldsDefinitionInputValueDefinitionParserRuleCall_4_1_0 = (RuleCall)cInputFieldsDefinitionAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//InputObjectTypeDefinition:
		//	description=StringValue? "input" name=NAME
		//	directives+=Directive* ("{" inputFieldsDefinition+=InputValueDefinition* "}")?;
		@Override public ParserRule getRule() { return rule; }
		
		//description=StringValue? "input" name=NAME directives+=Directive* ("{" inputFieldsDefinition+=InputValueDefinition*
		//"}")?
		public Group getGroup() { return cGroup; }
		
		//description=StringValue?
		public Assignment getDescriptionAssignment_0() { return cDescriptionAssignment_0; }
		
		//StringValue
		public RuleCall getDescriptionStringValueParserRuleCall_0_0() { return cDescriptionStringValueParserRuleCall_0_0; }
		
		//"input"
		public Keyword getInputKeyword_1() { return cInputKeyword_1; }
		
		//name=NAME
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_2_0() { return cNameNAMETerminalRuleCall_2_0; }
		
		//directives+=Directive*
		public Assignment getDirectivesAssignment_3() { return cDirectivesAssignment_3; }
		
		//Directive
		public RuleCall getDirectivesDirectiveParserRuleCall_3_0() { return cDirectivesDirectiveParserRuleCall_3_0; }
		
		//("{" inputFieldsDefinition+=InputValueDefinition* "}")?
		public Group getGroup_4() { return cGroup_4; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//inputFieldsDefinition+=InputValueDefinition*
		public Assignment getInputFieldsDefinitionAssignment_4_1() { return cInputFieldsDefinitionAssignment_4_1; }
		
		//InputValueDefinition
		public RuleCall getInputFieldsDefinitionInputValueDefinitionParserRuleCall_4_1_0() { return cInputFieldsDefinitionInputValueDefinitionParserRuleCall_4_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}
	public class InputValueDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.InputValueDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionStringValueParserRuleCall_0_0 = (RuleCall)cDescriptionAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDefaultValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDefaultValueConstValueParserRuleCall_4_1_0 = (RuleCall)cDefaultValueAssignment_4_1.eContents().get(0);
		
		//InputValueDefinition:
		//	description=StringValue? name=NAME ":" type=Type ('=' defaultValue=ConstValue)?;
		@Override public ParserRule getRule() { return rule; }
		
		//description=StringValue? name=NAME ":" type=Type ('=' defaultValue=ConstValue)?
		public Group getGroup() { return cGroup; }
		
		//description=StringValue?
		public Assignment getDescriptionAssignment_0() { return cDescriptionAssignment_0; }
		
		//StringValue
		public RuleCall getDescriptionStringValueParserRuleCall_0_0() { return cDescriptionStringValueParserRuleCall_0_0; }
		
		//name=NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_1_0() { return cNameNAMETerminalRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }
		
		//('=' defaultValue=ConstValue)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }
		
		//defaultValue=ConstValue
		public Assignment getDefaultValueAssignment_4_1() { return cDefaultValueAssignment_4_1; }
		
		//ConstValue
		public RuleCall getDefaultValueConstValueParserRuleCall_4_1_0() { return cDefaultValueConstValueParserRuleCall_4_1_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNamedTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cListTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	NamedType | ListType;
		@Override public ParserRule getRule() { return rule; }
		
		//NamedType | ListType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NamedType
		public RuleCall getNamedTypeParserRuleCall_0() { return cNamedTypeParserRuleCall_0; }
		
		//ListType
		public RuleCall getListTypeParserRuleCall_1() { return cListTypeParserRuleCall_1; }
	}
	public class NamedTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.NamedType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeDefinitionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeDefinitionTypeDefinitionCrossReference_0_0 = (CrossReference)cTypeDefinitionAssignment_0.eContents().get(0);
		private final RuleCall cTypeDefinitionTypeDefinitionNAMETerminalRuleCall_0_0_1 = (RuleCall)cTypeDefinitionTypeDefinitionCrossReference_0_0.eContents().get(1);
		private final Assignment cNonNullAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNonNullExclamationMarkKeyword_1_0 = (Keyword)cNonNullAssignment_1.eContents().get(0);
		
		//NamedType:
		//	typeDefinition=[TypeDefinition|NAME] nonNull?='!'?;
		@Override public ParserRule getRule() { return rule; }
		
		//typeDefinition=[TypeDefinition|NAME] nonNull?='!'?
		public Group getGroup() { return cGroup; }
		
		//typeDefinition=[TypeDefinition|NAME]
		public Assignment getTypeDefinitionAssignment_0() { return cTypeDefinitionAssignment_0; }
		
		//[TypeDefinition|NAME]
		public CrossReference getTypeDefinitionTypeDefinitionCrossReference_0_0() { return cTypeDefinitionTypeDefinitionCrossReference_0_0; }
		
		//NAME
		public RuleCall getTypeDefinitionTypeDefinitionNAMETerminalRuleCall_0_0_1() { return cTypeDefinitionTypeDefinitionNAMETerminalRuleCall_0_0_1; }
		
		//nonNull?='!'?
		public Assignment getNonNullAssignment_1() { return cNonNullAssignment_1; }
		
		//'!'
		public Keyword getNonNullExclamationMarkKeyword_1_0() { return cNonNullExclamationMarkKeyword_1_0; }
	}
	public class ListTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.ListType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNonNullAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cNonNullExclamationMarkKeyword_3_0 = (Keyword)cNonNullAssignment_3.eContents().get(0);
		
		//ListType:
		//	'[' type=Type ']' nonNull?='!'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' type=Type ']' nonNull?='!'?
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
		
		//nonNull?='!'?
		public Assignment getNonNullAssignment_3() { return cNonNullAssignment_3; }
		
		//'!'
		public Keyword getNonNullExclamationMarkKeyword_3_0() { return cNonNullExclamationMarkKeyword_3_0; }
	}
	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.IntValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINT_VALUETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntValue:
		//	value=INT_VALUE;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT_VALUE
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT_VALUE
		public RuleCall getValueINT_VALUETerminalRuleCall_0() { return cValueINT_VALUETerminalRuleCall_0; }
	}
	public class FloatValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.FloatValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueFLOAT_VALUETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//FloatValue:
		//	value=FLOAT_VALUE;
		@Override public ParserRule getRule() { return rule; }
		
		//value=FLOAT_VALUE
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//FLOAT_VALUE
		public RuleCall getValueFLOAT_VALUETerminalRuleCall_0() { return cValueFLOAT_VALUETerminalRuleCall_0; }
	}
	public class NullValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.NullValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValueNullKeyword_0 = (Keyword)cValueAssignment.eContents().get(0);
		
		//NullValue:
		//	value='null';
		@Override public ParserRule getRule() { return rule; }
		
		//value='null'
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//'null'
		public Keyword getValueNullKeyword_0() { return cValueNullKeyword_0; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final RuleCall cValueSL_STRING_VALUETerminalRuleCall_0_0 = (RuleCall)cValueAlternatives_0.eContents().get(0);
		private final RuleCall cValueML_STRING_VALUETerminalRuleCall_0_1 = (RuleCall)cValueAlternatives_0.eContents().get(1);
		
		//StringValue:
		//	value=(SL_STRING_VALUE | ML_STRING_VALUE);
		@Override public ParserRule getRule() { return rule; }
		
		//value=(SL_STRING_VALUE | ML_STRING_VALUE)
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//(SL_STRING_VALUE | ML_STRING_VALUE)
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//SL_STRING_VALUE
		public RuleCall getValueSL_STRING_VALUETerminalRuleCall_0_0() { return cValueSL_STRING_VALUETerminalRuleCall_0_0; }
		
		//ML_STRING_VALUE
		public RuleCall getValueML_STRING_VALUETerminalRuleCall_0_1() { return cValueML_STRING_VALUETerminalRuleCall_0_1; }
	}
	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.BooleanValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueTrueKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		
		//BooleanValue:
		//	value=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_0_0() { return cValueTrueKeyword_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_0_1() { return cValueFalseKeyword_0_1; }
	}
	public class EnumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.EnumValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cValueEnumValueDefinitionCrossReference_0 = (CrossReference)cValueAssignment.eContents().get(0);
		private final RuleCall cValueEnumValueDefinitionNAMETerminalRuleCall_0_1 = (RuleCall)cValueEnumValueDefinitionCrossReference_0.eContents().get(1);
		
		//EnumValue:
		//	value=[EnumValueDefinition|NAME];
		@Override public ParserRule getRule() { return rule; }
		
		//value=[EnumValueDefinition|NAME]
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//[EnumValueDefinition|NAME]
		public CrossReference getValueEnumValueDefinitionCrossReference_0() { return cValueEnumValueDefinitionCrossReference_0; }
		
		//NAME
		public RuleCall getValueEnumValueDefinitionNAMETerminalRuleCall_0_1() { return cValueEnumValueDefinitionNAMETerminalRuleCall_0_1; }
	}
	public class ObjectValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.ObjectValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObjectValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFieldsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldsObjectFieldParserRuleCall_2_0 = (RuleCall)cFieldsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ObjectValue:
		//	{ObjectValue} '{' fields+=ObjectField* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ObjectValue} '{' fields+=ObjectField* '}'
		public Group getGroup() { return cGroup; }
		
		//{ObjectValue}
		public Action getObjectValueAction_0() { return cObjectValueAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//fields+=ObjectField*
		public Assignment getFieldsAssignment_2() { return cFieldsAssignment_2; }
		
		//ObjectField
		public RuleCall getFieldsObjectFieldParserRuleCall_2_0() { return cFieldsObjectFieldParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ObjectFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.ObjectField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFieldDefinitionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFieldDefinitionFieldDefinitionCrossReference_0_0 = (CrossReference)cFieldDefinitionAssignment_0.eContents().get(0);
		private final RuleCall cFieldDefinitionFieldDefinitionNAMETerminalRuleCall_0_0_1 = (RuleCall)cFieldDefinitionFieldDefinitionCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueConstValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ObjectField:
		//	fieldDefinition=[FieldDefinition|NAME] ':' value=ConstValue;
		@Override public ParserRule getRule() { return rule; }
		
		//fieldDefinition=[FieldDefinition|NAME] ':' value=ConstValue
		public Group getGroup() { return cGroup; }
		
		//fieldDefinition=[FieldDefinition|NAME]
		public Assignment getFieldDefinitionAssignment_0() { return cFieldDefinitionAssignment_0; }
		
		//[FieldDefinition|NAME]
		public CrossReference getFieldDefinitionFieldDefinitionCrossReference_0_0() { return cFieldDefinitionFieldDefinitionCrossReference_0_0; }
		
		//NAME
		public RuleCall getFieldDefinitionFieldDefinitionNAMETerminalRuleCall_0_0_1() { return cFieldDefinitionFieldDefinitionNAMETerminalRuleCall_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=ConstValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//ConstValue
		public RuleCall getValueConstValueParserRuleCall_2_0() { return cValueConstValueParserRuleCall_2_0; }
	}
	public class ConstValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.ConstValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloatValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNullValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStringValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEnumValueParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cListValueParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cObjectValueParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//ConstValue:
		//	IntValue | FloatValue | BooleanValue | NullValue | StringValue | EnumValue | ListValue | ObjectValue;
		@Override public ParserRule getRule() { return rule; }
		
		//IntValue | FloatValue | BooleanValue | NullValue | StringValue | EnumValue | ListValue | ObjectValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_0() { return cIntValueParserRuleCall_0; }
		
		//FloatValue
		public RuleCall getFloatValueParserRuleCall_1() { return cFloatValueParserRuleCall_1; }
		
		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_2() { return cBooleanValueParserRuleCall_2; }
		
		//NullValue
		public RuleCall getNullValueParserRuleCall_3() { return cNullValueParserRuleCall_3; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_4() { return cStringValueParserRuleCall_4; }
		
		//EnumValue
		public RuleCall getEnumValueParserRuleCall_5() { return cEnumValueParserRuleCall_5; }
		
		//ListValue
		public RuleCall getListValueParserRuleCall_6() { return cListValueParserRuleCall_6; }
		
		//ObjectValue
		public RuleCall getObjectValueParserRuleCall_7() { return cObjectValueParserRuleCall_7; }
	}
	public class ListValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.ListValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesConstValueParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ListValue:
		//	{ListValue} '[' values+=ConstValue* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{ListValue} '[' values+=ConstValue* ']'
		public Group getGroup() { return cGroup; }
		
		//{ListValue}
		public Action getListValueAction_0() { return cListValueAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//values+=ConstValue*
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }
		
		//ConstValue
		public RuleCall getValuesConstValueParserRuleCall_2_0() { return cValuesConstValueParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class DirectiveDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.DirectiveDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionStringValueParserRuleCall_0_0 = (RuleCall)cDescriptionAssignment_0.eContents().get(0);
		private final Keyword cDirectiveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameDIRECTIVE_NAMETerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgumentsDefinitionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgumentsDefinitionInputValueDefinitionParserRuleCall_3_1_0 = (RuleCall)cArgumentsDefinitionAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cRepeatableAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cRepeatableRepeatableKeyword_4_0 = (Keyword)cRepeatableAssignment_4.eContents().get(0);
		private final Keyword cOnKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cVerticalLineKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDirectiveLocationsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDirectiveLocationsDirectiveLocationEnumRuleCall_7_0 = (RuleCall)cDirectiveLocationsAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cVerticalLineKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cDirectiveLocationsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cDirectiveLocationsDirectiveLocationEnumRuleCall_8_1_0 = (RuleCall)cDirectiveLocationsAssignment_8_1.eContents().get(0);
		
		//DirectiveDefinition:
		//	description=StringValue? 'directive' name=DIRECTIVE_NAME ('(' argumentsDefinition+=InputValueDefinition* ')')?
		//	repeatable?='repeatable'? 'on' '|'? directiveLocations+=DirectiveLocation ('|'
		//	directiveLocations+=DirectiveLocation)*;
		@Override public ParserRule getRule() { return rule; }
		
		//description=StringValue? 'directive' name=DIRECTIVE_NAME ('(' argumentsDefinition+=InputValueDefinition* ')')?
		//repeatable?='repeatable'? 'on' '|'? directiveLocations+=DirectiveLocation ('|' directiveLocations+=DirectiveLocation)*
		public Group getGroup() { return cGroup; }
		
		//description=StringValue?
		public Assignment getDescriptionAssignment_0() { return cDescriptionAssignment_0; }
		
		//StringValue
		public RuleCall getDescriptionStringValueParserRuleCall_0_0() { return cDescriptionStringValueParserRuleCall_0_0; }
		
		//'directive'
		public Keyword getDirectiveKeyword_1() { return cDirectiveKeyword_1; }
		
		//name=DIRECTIVE_NAME
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//DIRECTIVE_NAME
		public RuleCall getNameDIRECTIVE_NAMETerminalRuleCall_2_0() { return cNameDIRECTIVE_NAMETerminalRuleCall_2_0; }
		
		//('(' argumentsDefinition+=InputValueDefinition* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//argumentsDefinition+=InputValueDefinition*
		public Assignment getArgumentsDefinitionAssignment_3_1() { return cArgumentsDefinitionAssignment_3_1; }
		
		//InputValueDefinition
		public RuleCall getArgumentsDefinitionInputValueDefinitionParserRuleCall_3_1_0() { return cArgumentsDefinitionInputValueDefinitionParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
		
		//repeatable?='repeatable'?
		public Assignment getRepeatableAssignment_4() { return cRepeatableAssignment_4; }
		
		//'repeatable'
		public Keyword getRepeatableRepeatableKeyword_4_0() { return cRepeatableRepeatableKeyword_4_0; }
		
		//'on'
		public Keyword getOnKeyword_5() { return cOnKeyword_5; }
		
		//'|'?
		public Keyword getVerticalLineKeyword_6() { return cVerticalLineKeyword_6; }
		
		//directiveLocations+=DirectiveLocation
		public Assignment getDirectiveLocationsAssignment_7() { return cDirectiveLocationsAssignment_7; }
		
		//DirectiveLocation
		public RuleCall getDirectiveLocationsDirectiveLocationEnumRuleCall_7_0() { return cDirectiveLocationsDirectiveLocationEnumRuleCall_7_0; }
		
		//('|' directiveLocations+=DirectiveLocation)*
		public Group getGroup_8() { return cGroup_8; }
		
		//'|'
		public Keyword getVerticalLineKeyword_8_0() { return cVerticalLineKeyword_8_0; }
		
		//directiveLocations+=DirectiveLocation
		public Assignment getDirectiveLocationsAssignment_8_1() { return cDirectiveLocationsAssignment_8_1; }
		
		//DirectiveLocation
		public RuleCall getDirectiveLocationsDirectiveLocationEnumRuleCall_8_1_0() { return cDirectiveLocationsDirectiveLocationEnumRuleCall_8_1_0; }
	}
	public class DirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.Directive");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectiveAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cDirectiveDirectiveDefinitionCrossReference_0_0 = (CrossReference)cDirectiveAssignment_0.eContents().get(0);
		private final RuleCall cDirectiveDirectiveDefinitionDIRECTIVE_NAMETerminalRuleCall_0_0_1 = (RuleCall)cDirectiveDirectiveDefinitionCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentsArgumentParserRuleCall_1_1_0 = (RuleCall)cArgumentsAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Directive:
		//	directive=[DirectiveDefinition|DIRECTIVE_NAME] ('(' arguments+=Argument* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//directive=[DirectiveDefinition|DIRECTIVE_NAME] ('(' arguments+=Argument* ')')?
		public Group getGroup() { return cGroup; }
		
		//directive=[DirectiveDefinition|DIRECTIVE_NAME]
		public Assignment getDirectiveAssignment_0() { return cDirectiveAssignment_0; }
		
		//[DirectiveDefinition|DIRECTIVE_NAME]
		public CrossReference getDirectiveDirectiveDefinitionCrossReference_0_0() { return cDirectiveDirectiveDefinitionCrossReference_0_0; }
		
		//DIRECTIVE_NAME
		public RuleCall getDirectiveDirectiveDefinitionDIRECTIVE_NAMETerminalRuleCall_0_0_1() { return cDirectiveDirectiveDefinitionDIRECTIVE_NAMETerminalRuleCall_0_0_1; }
		
		//('(' arguments+=Argument* ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//arguments+=Argument*
		public Assignment getArgumentsAssignment_1_1() { return cArgumentsAssignment_1_1; }
		
		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_1_1_0() { return cArgumentsArgumentParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.Argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgumentDefinitionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cArgumentDefinitionInputValueDefinitionCrossReference_0_0 = (CrossReference)cArgumentDefinitionAssignment_0.eContents().get(0);
		private final RuleCall cArgumentDefinitionInputValueDefinitionNAMETerminalRuleCall_0_0_1 = (RuleCall)cArgumentDefinitionInputValueDefinitionCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueConstValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Argument:
		//	argumentDefinition=[InputValueDefinition|NAME] ':' value=ConstValue;
		@Override public ParserRule getRule() { return rule; }
		
		//argumentDefinition=[InputValueDefinition|NAME] ':' value=ConstValue
		public Group getGroup() { return cGroup; }
		
		//argumentDefinition=[InputValueDefinition|NAME]
		public Assignment getArgumentDefinitionAssignment_0() { return cArgumentDefinitionAssignment_0; }
		
		//[InputValueDefinition|NAME]
		public CrossReference getArgumentDefinitionInputValueDefinitionCrossReference_0_0() { return cArgumentDefinitionInputValueDefinitionCrossReference_0_0; }
		
		//NAME
		public RuleCall getArgumentDefinitionInputValueDefinitionNAMETerminalRuleCall_0_0_1() { return cArgumentDefinitionInputValueDefinitionNAMETerminalRuleCall_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=ConstValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//ConstValue
		public RuleCall getValueConstValueParserRuleCall_2_0() { return cValueConstValueParserRuleCall_2_0; }
	}
	
	public class DirectiveLocationElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.DirectiveLocation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cQUERYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cQUERYQUERYKeyword_0_0 = (Keyword)cQUERYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMUTATIONEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMUTATIONMUTATIONKeyword_1_0 = (Keyword)cMUTATIONEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSUBSCRIPTIONEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSUBSCRIPTIONSUBSCRIPTIONKeyword_2_0 = (Keyword)cSUBSCRIPTIONEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFIELDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFIELDFIELDKeyword_3_0 = (Keyword)cFIELDEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFRAGMENT_DEFINITIONEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFRAGMENT_DEFINITIONFRAGMENT_DEFINITIONKeyword_4_0 = (Keyword)cFRAGMENT_DEFINITIONEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cFRAGMENT_SPREADEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cFRAGMENT_SPREADFRAGMENT_SPREADKeyword_5_0 = (Keyword)cFRAGMENT_SPREADEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cINLINE_FRAGMENTEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cINLINE_FRAGMENTINLINE_FRAGMENTKeyword_6_0 = (Keyword)cINLINE_FRAGMENTEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cVARIABLE_DEFINITIONEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cVARIABLE_DEFINITIONVARIABLE_DEFINITIONKeyword_7_0 = (Keyword)cVARIABLE_DEFINITIONEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cSCHEMAEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cSCHEMASCHEMAKeyword_8_0 = (Keyword)cSCHEMAEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cSCALAREnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cSCALARSCALARKeyword_9_0 = (Keyword)cSCALAREnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cOBJECTEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cOBJECTOBJECTKeyword_10_0 = (Keyword)cOBJECTEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cFIELD_DEFINITIONEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cFIELD_DEFINITIONFIELD_DEFINITIONKeyword_11_0 = (Keyword)cFIELD_DEFINITIONEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cARGUMENT_DEFINITIONEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cARGUMENT_DEFINITIONARGUMENT_DEFINITIONKeyword_12_0 = (Keyword)cARGUMENT_DEFINITIONEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cINTERFACEEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cINTERFACEINTERFACEKeyword_13_0 = (Keyword)cINTERFACEEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cUNIONEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cUNIONUNIONKeyword_14_0 = (Keyword)cUNIONEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cENUMEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cENUMENUMKeyword_15_0 = (Keyword)cENUMEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cENUM_VALUEEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cENUM_VALUEENUM_VALUEKeyword_16_0 = (Keyword)cENUM_VALUEEnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cINPUT_OBJECTEnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cINPUT_OBJECTINPUT_OBJECTKeyword_17_0 = (Keyword)cINPUT_OBJECTEnumLiteralDeclaration_17.eContents().get(0);
		private final EnumLiteralDeclaration cINPUT_FIELD_DEFINITIONEnumLiteralDeclaration_18 = (EnumLiteralDeclaration)cAlternatives.eContents().get(18);
		private final Keyword cINPUT_FIELD_DEFINITIONINPUT_FIELD_DEFINITIONKeyword_18_0 = (Keyword)cINPUT_FIELD_DEFINITIONEnumLiteralDeclaration_18.eContents().get(0);
		
		//enum DirectiveLocation:
		//	QUERY |
		//	MUTATION |
		//	SUBSCRIPTION |
		//	FIELD |
		//	FRAGMENT_DEFINITION |
		//	FRAGMENT_SPREAD |
		//	INLINE_FRAGMENT |
		//	VARIABLE_DEFINITION |
		//	SCHEMA |
		//	SCALAR |
		//	OBJECT |
		//	FIELD_DEFINITION |
		//	ARGUMENT_DEFINITION |
		//	INTERFACE |
		//	UNION |
		//	ENUM |
		//	ENUM_VALUE |
		//	INPUT_OBJECT |
		//	INPUT_FIELD_DEFINITION;
		public EnumRule getRule() { return rule; }
		
		//QUERY | MUTATION | SUBSCRIPTION | FIELD | FRAGMENT_DEFINITION | FRAGMENT_SPREAD | INLINE_FRAGMENT | VARIABLE_DEFINITION
		//| SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE |
		//INPUT_OBJECT | INPUT_FIELD_DEFINITION
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//QUERY
		public EnumLiteralDeclaration getQUERYEnumLiteralDeclaration_0() { return cQUERYEnumLiteralDeclaration_0; }
		
		//"QUERY"
		public Keyword getQUERYQUERYKeyword_0_0() { return cQUERYQUERYKeyword_0_0; }
		
		//MUTATION
		public EnumLiteralDeclaration getMUTATIONEnumLiteralDeclaration_1() { return cMUTATIONEnumLiteralDeclaration_1; }
		
		//"MUTATION"
		public Keyword getMUTATIONMUTATIONKeyword_1_0() { return cMUTATIONMUTATIONKeyword_1_0; }
		
		//SUBSCRIPTION
		public EnumLiteralDeclaration getSUBSCRIPTIONEnumLiteralDeclaration_2() { return cSUBSCRIPTIONEnumLiteralDeclaration_2; }
		
		//"SUBSCRIPTION"
		public Keyword getSUBSCRIPTIONSUBSCRIPTIONKeyword_2_0() { return cSUBSCRIPTIONSUBSCRIPTIONKeyword_2_0; }
		
		//FIELD
		public EnumLiteralDeclaration getFIELDEnumLiteralDeclaration_3() { return cFIELDEnumLiteralDeclaration_3; }
		
		//"FIELD"
		public Keyword getFIELDFIELDKeyword_3_0() { return cFIELDFIELDKeyword_3_0; }
		
		//FRAGMENT_DEFINITION
		public EnumLiteralDeclaration getFRAGMENT_DEFINITIONEnumLiteralDeclaration_4() { return cFRAGMENT_DEFINITIONEnumLiteralDeclaration_4; }
		
		//"FRAGMENT_DEFINITION"
		public Keyword getFRAGMENT_DEFINITIONFRAGMENT_DEFINITIONKeyword_4_0() { return cFRAGMENT_DEFINITIONFRAGMENT_DEFINITIONKeyword_4_0; }
		
		//FRAGMENT_SPREAD
		public EnumLiteralDeclaration getFRAGMENT_SPREADEnumLiteralDeclaration_5() { return cFRAGMENT_SPREADEnumLiteralDeclaration_5; }
		
		//"FRAGMENT_SPREAD"
		public Keyword getFRAGMENT_SPREADFRAGMENT_SPREADKeyword_5_0() { return cFRAGMENT_SPREADFRAGMENT_SPREADKeyword_5_0; }
		
		//INLINE_FRAGMENT
		public EnumLiteralDeclaration getINLINE_FRAGMENTEnumLiteralDeclaration_6() { return cINLINE_FRAGMENTEnumLiteralDeclaration_6; }
		
		//"INLINE_FRAGMENT"
		public Keyword getINLINE_FRAGMENTINLINE_FRAGMENTKeyword_6_0() { return cINLINE_FRAGMENTINLINE_FRAGMENTKeyword_6_0; }
		
		//VARIABLE_DEFINITION
		public EnumLiteralDeclaration getVARIABLE_DEFINITIONEnumLiteralDeclaration_7() { return cVARIABLE_DEFINITIONEnumLiteralDeclaration_7; }
		
		//"VARIABLE_DEFINITION"
		public Keyword getVARIABLE_DEFINITIONVARIABLE_DEFINITIONKeyword_7_0() { return cVARIABLE_DEFINITIONVARIABLE_DEFINITIONKeyword_7_0; }
		
		//SCHEMA
		public EnumLiteralDeclaration getSCHEMAEnumLiteralDeclaration_8() { return cSCHEMAEnumLiteralDeclaration_8; }
		
		//"SCHEMA"
		public Keyword getSCHEMASCHEMAKeyword_8_0() { return cSCHEMASCHEMAKeyword_8_0; }
		
		//SCALAR
		public EnumLiteralDeclaration getSCALAREnumLiteralDeclaration_9() { return cSCALAREnumLiteralDeclaration_9; }
		
		//"SCALAR"
		public Keyword getSCALARSCALARKeyword_9_0() { return cSCALARSCALARKeyword_9_0; }
		
		//OBJECT
		public EnumLiteralDeclaration getOBJECTEnumLiteralDeclaration_10() { return cOBJECTEnumLiteralDeclaration_10; }
		
		//"OBJECT"
		public Keyword getOBJECTOBJECTKeyword_10_0() { return cOBJECTOBJECTKeyword_10_0; }
		
		//FIELD_DEFINITION
		public EnumLiteralDeclaration getFIELD_DEFINITIONEnumLiteralDeclaration_11() { return cFIELD_DEFINITIONEnumLiteralDeclaration_11; }
		
		//"FIELD_DEFINITION"
		public Keyword getFIELD_DEFINITIONFIELD_DEFINITIONKeyword_11_0() { return cFIELD_DEFINITIONFIELD_DEFINITIONKeyword_11_0; }
		
		//ARGUMENT_DEFINITION
		public EnumLiteralDeclaration getARGUMENT_DEFINITIONEnumLiteralDeclaration_12() { return cARGUMENT_DEFINITIONEnumLiteralDeclaration_12; }
		
		//"ARGUMENT_DEFINITION"
		public Keyword getARGUMENT_DEFINITIONARGUMENT_DEFINITIONKeyword_12_0() { return cARGUMENT_DEFINITIONARGUMENT_DEFINITIONKeyword_12_0; }
		
		//INTERFACE
		public EnumLiteralDeclaration getINTERFACEEnumLiteralDeclaration_13() { return cINTERFACEEnumLiteralDeclaration_13; }
		
		//"INTERFACE"
		public Keyword getINTERFACEINTERFACEKeyword_13_0() { return cINTERFACEINTERFACEKeyword_13_0; }
		
		//UNION
		public EnumLiteralDeclaration getUNIONEnumLiteralDeclaration_14() { return cUNIONEnumLiteralDeclaration_14; }
		
		//"UNION"
		public Keyword getUNIONUNIONKeyword_14_0() { return cUNIONUNIONKeyword_14_0; }
		
		//ENUM
		public EnumLiteralDeclaration getENUMEnumLiteralDeclaration_15() { return cENUMEnumLiteralDeclaration_15; }
		
		//"ENUM"
		public Keyword getENUMENUMKeyword_15_0() { return cENUMENUMKeyword_15_0; }
		
		//ENUM_VALUE
		public EnumLiteralDeclaration getENUM_VALUEEnumLiteralDeclaration_16() { return cENUM_VALUEEnumLiteralDeclaration_16; }
		
		//"ENUM_VALUE"
		public Keyword getENUM_VALUEENUM_VALUEKeyword_16_0() { return cENUM_VALUEENUM_VALUEKeyword_16_0; }
		
		//INPUT_OBJECT
		public EnumLiteralDeclaration getINPUT_OBJECTEnumLiteralDeclaration_17() { return cINPUT_OBJECTEnumLiteralDeclaration_17; }
		
		//"INPUT_OBJECT"
		public Keyword getINPUT_OBJECTINPUT_OBJECTKeyword_17_0() { return cINPUT_OBJECTINPUT_OBJECTKeyword_17_0; }
		
		//INPUT_FIELD_DEFINITION
		public EnumLiteralDeclaration getINPUT_FIELD_DEFINITIONEnumLiteralDeclaration_18() { return cINPUT_FIELD_DEFINITIONEnumLiteralDeclaration_18; }
		
		//"INPUT_FIELD_DEFINITION"
		public Keyword getINPUT_FIELD_DEFINITIONINPUT_FIELD_DEFINITIONKeyword_18_0() { return cINPUT_FIELD_DEFINITIONINPUT_FIELD_DEFINITIONKeyword_18_0; }
	}
	public class OperationTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.OperationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cQUERYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cQUERYQueryKeyword_0_0 = (Keyword)cQUERYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMUTATIONEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMUTATIONMutationKeyword_1_0 = (Keyword)cMUTATIONEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSUBSCRIPTIONEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSUBSCRIPTIONSubscriptionKeyword_2_0 = (Keyword)cSUBSCRIPTIONEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum OperationType:
		//	QUERY="query" |
		//	MUTATION="mutation" |
		//	SUBSCRIPTION="subscription";
		public EnumRule getRule() { return rule; }
		
		//QUERY="query" | MUTATION="mutation" | SUBSCRIPTION="subscription"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//QUERY="query"
		public EnumLiteralDeclaration getQUERYEnumLiteralDeclaration_0() { return cQUERYEnumLiteralDeclaration_0; }
		
		//"query"
		public Keyword getQUERYQueryKeyword_0_0() { return cQUERYQueryKeyword_0_0; }
		
		//MUTATION="mutation"
		public EnumLiteralDeclaration getMUTATIONEnumLiteralDeclaration_1() { return cMUTATIONEnumLiteralDeclaration_1; }
		
		//"mutation"
		public Keyword getMUTATIONMutationKeyword_1_0() { return cMUTATIONMutationKeyword_1_0; }
		
		//SUBSCRIPTION="subscription"
		public EnumLiteralDeclaration getSUBSCRIPTIONEnumLiteralDeclaration_2() { return cSUBSCRIPTIONEnumLiteralDeclaration_2; }
		
		//"subscription"
		public Keyword getSUBSCRIPTIONSubscriptionKeyword_2_0() { return cSUBSCRIPTIONSubscriptionKeyword_2_0; }
	}
	
	private final TypeSystemDefinitionElements pTypeSystemDefinition;
	private final SchemaDefinitionElements pSchemaDefinition;
	private final RootOperationTypeDefinitionElements pRootOperationTypeDefinition;
	private final TypeDefinitionElements pTypeDefinition;
	private final ScalarTypeDefinitionElements pScalarTypeDefinition;
	private final ObjectTypeDefinitionElements pObjectTypeDefinition;
	private final InterfaceDefinitionElements pInterfaceDefinition;
	private final FieldDefinitionElements pFieldDefinition;
	private final UnionTypeDefinitionElements pUnionTypeDefinition;
	private final EnumTypeDefinitionElements pEnumTypeDefinition;
	private final EnumValueDefinitionElements pEnumValueDefinition;
	private final InputObjectTypeDefinitionElements pInputObjectTypeDefinition;
	private final InputValueDefinitionElements pInputValueDefinition;
	private final TypeElements pType;
	private final NamedTypeElements pNamedType;
	private final ListTypeElements pListType;
	private final IntValueElements pIntValue;
	private final FloatValueElements pFloatValue;
	private final NullValueElements pNullValue;
	private final StringValueElements pStringValue;
	private final BooleanValueElements pBooleanValue;
	private final EnumValueElements pEnumValue;
	private final ObjectValueElements pObjectValue;
	private final ObjectFieldElements pObjectField;
	private final ConstValueElements pConstValue;
	private final ListValueElements pListValue;
	private final DirectiveDefinitionElements pDirectiveDefinition;
	private final DirectiveElements pDirective;
	private final ArgumentElements pArgument;
	private final DirectiveLocationElements eDirectiveLocation;
	private final OperationTypeElements eOperationType;
	private final TerminalRule tDIRECTIVE_NAME;
	private final TerminalRule tNAME;
	private final TerminalRule tINT_VALUE;
	private final TerminalRule tFLOAT_VALUE;
	private final TerminalRule tWS;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tCOMMA;
	private final TerminalRule tSL_STRING_VALUE;
	private final TerminalRule tML_STRING_VALUE;
	private final TerminalRule tSTRING_CHARACTER;
	
	private final Grammar grammar;

	@Inject
	public GraphQLGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pTypeSystemDefinition = new TypeSystemDefinitionElements();
		this.pSchemaDefinition = new SchemaDefinitionElements();
		this.pRootOperationTypeDefinition = new RootOperationTypeDefinitionElements();
		this.pTypeDefinition = new TypeDefinitionElements();
		this.pScalarTypeDefinition = new ScalarTypeDefinitionElements();
		this.pObjectTypeDefinition = new ObjectTypeDefinitionElements();
		this.pInterfaceDefinition = new InterfaceDefinitionElements();
		this.pFieldDefinition = new FieldDefinitionElements();
		this.pUnionTypeDefinition = new UnionTypeDefinitionElements();
		this.pEnumTypeDefinition = new EnumTypeDefinitionElements();
		this.pEnumValueDefinition = new EnumValueDefinitionElements();
		this.pInputObjectTypeDefinition = new InputObjectTypeDefinitionElements();
		this.pInputValueDefinition = new InputValueDefinitionElements();
		this.pType = new TypeElements();
		this.pNamedType = new NamedTypeElements();
		this.pListType = new ListTypeElements();
		this.pIntValue = new IntValueElements();
		this.pFloatValue = new FloatValueElements();
		this.pNullValue = new NullValueElements();
		this.pStringValue = new StringValueElements();
		this.pBooleanValue = new BooleanValueElements();
		this.pEnumValue = new EnumValueElements();
		this.pObjectValue = new ObjectValueElements();
		this.pObjectField = new ObjectFieldElements();
		this.pConstValue = new ConstValueElements();
		this.pListValue = new ListValueElements();
		this.pDirectiveDefinition = new DirectiveDefinitionElements();
		this.pDirective = new DirectiveElements();
		this.pArgument = new ArgumentElements();
		this.eDirectiveLocation = new DirectiveLocationElements();
		this.eOperationType = new OperationTypeElements();
		this.tDIRECTIVE_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.DIRECTIVE_NAME");
		this.tNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.NAME");
		this.tINT_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.INT_VALUE");
		this.tFLOAT_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.FLOAT_VALUE");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.WS");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.SL_COMMENT");
		this.tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.COMMA");
		this.tSL_STRING_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.SL_STRING_VALUE");
		this.tML_STRING_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.ML_STRING_VALUE");
		this.tSTRING_CHARACTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.STRING_CHARACTER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("io.github.katmatt.graphql.GraphQL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//TypeSystemDefinition:
	//	(schemaDefinitions+=SchemaDefinition | typeDefinitions+=TypeDefinition | directiveDefinitions+=DirectiveDefinition)*;
	public TypeSystemDefinitionElements getTypeSystemDefinitionAccess() {
		return pTypeSystemDefinition;
	}
	
	public ParserRule getTypeSystemDefinitionRule() {
		return getTypeSystemDefinitionAccess().getRule();
	}
	
	//SchemaDefinition:
	//	description=StringValue? "schema" "{" typeDefinitions+=RootOperationTypeDefinition+ "}";
	public SchemaDefinitionElements getSchemaDefinitionAccess() {
		return pSchemaDefinition;
	}
	
	public ParserRule getSchemaDefinitionRule() {
		return getSchemaDefinitionAccess().getRule();
	}
	
	//RootOperationTypeDefinition:
	//	operationType=OperationType ":" type=[TypeDefinition|NAME];
	public RootOperationTypeDefinitionElements getRootOperationTypeDefinitionAccess() {
		return pRootOperationTypeDefinition;
	}
	
	public ParserRule getRootOperationTypeDefinitionRule() {
		return getRootOperationTypeDefinitionAccess().getRule();
	}
	
	//TypeDefinition:
	//	ScalarTypeDefinition | ObjectTypeDefinition | InterfaceDefinition | UnionTypeDefinition | EnumTypeDefinition |
	//	InputObjectTypeDefinition;
	public TypeDefinitionElements getTypeDefinitionAccess() {
		return pTypeDefinition;
	}
	
	public ParserRule getTypeDefinitionRule() {
		return getTypeDefinitionAccess().getRule();
	}
	
	//ScalarTypeDefinition:
	//	description=StringValue? "scalar" name=NAME
	//	directives+=Directive*;
	public ScalarTypeDefinitionElements getScalarTypeDefinitionAccess() {
		return pScalarTypeDefinition;
	}
	
	public ParserRule getScalarTypeDefinitionRule() {
		return getScalarTypeDefinitionAccess().getRule();
	}
	
	//ObjectTypeDefinition:
	//	description=StringValue? "type" name=NAME ('implements' '&'? implementsInterfaces+=[InterfaceDefinition|NAME] ('&'
	//	implementsInterfaces+=[InterfaceDefinition|NAME])*)?
	//	directives+=Directive* ("{" fieldDefinitions+=FieldDefinition* "}")?;
	public ObjectTypeDefinitionElements getObjectTypeDefinitionAccess() {
		return pObjectTypeDefinition;
	}
	
	public ParserRule getObjectTypeDefinitionRule() {
		return getObjectTypeDefinitionAccess().getRule();
	}
	
	//InterfaceDefinition:
	//	description=StringValue? "interface" name=NAME ('implements' '&'? implementsInterfaces+=[InterfaceDefinition|NAME]
	//	('&' implementsInterfaces+=[InterfaceDefinition|NAME])*)?
	//	directives+=Directive* ("{" fieldDefinitions+=FieldDefinition* "}")?;
	public InterfaceDefinitionElements getInterfaceDefinitionAccess() {
		return pInterfaceDefinition;
	}
	
	public ParserRule getInterfaceDefinitionRule() {
		return getInterfaceDefinitionAccess().getRule();
	}
	
	//FieldDefinition:
	//	description=StringValue? name=NAME ('(' argumentsDefinition+=InputValueDefinition* ')')? ":" type=Type;
	public FieldDefinitionElements getFieldDefinitionAccess() {
		return pFieldDefinition;
	}
	
	public ParserRule getFieldDefinitionRule() {
		return getFieldDefinitionAccess().getRule();
	}
	
	//UnionTypeDefinition:
	//	description=StringValue? "union" name=NAME
	//	directives+=Directive* ("=" "|"? memberTypes+=Type ("|" memberTypes+=Type)*)?;
	public UnionTypeDefinitionElements getUnionTypeDefinitionAccess() {
		return pUnionTypeDefinition;
	}
	
	public ParserRule getUnionTypeDefinitionRule() {
		return getUnionTypeDefinitionAccess().getRule();
	}
	
	//EnumTypeDefinition:
	//	description=StringValue? "enum" name=NAME
	//	directives+=Directive* ("{" enumValuesDefinition+=EnumValueDefinition* "}")?;
	public EnumTypeDefinitionElements getEnumTypeDefinitionAccess() {
		return pEnumTypeDefinition;
	}
	
	public ParserRule getEnumTypeDefinitionRule() {
		return getEnumTypeDefinitionAccess().getRule();
	}
	
	//EnumValueDefinition:
	//	description=StringValue? name=NAME;
	public EnumValueDefinitionElements getEnumValueDefinitionAccess() {
		return pEnumValueDefinition;
	}
	
	public ParserRule getEnumValueDefinitionRule() {
		return getEnumValueDefinitionAccess().getRule();
	}
	
	//InputObjectTypeDefinition:
	//	description=StringValue? "input" name=NAME
	//	directives+=Directive* ("{" inputFieldsDefinition+=InputValueDefinition* "}")?;
	public InputObjectTypeDefinitionElements getInputObjectTypeDefinitionAccess() {
		return pInputObjectTypeDefinition;
	}
	
	public ParserRule getInputObjectTypeDefinitionRule() {
		return getInputObjectTypeDefinitionAccess().getRule();
	}
	
	//InputValueDefinition:
	//	description=StringValue? name=NAME ":" type=Type ('=' defaultValue=ConstValue)?;
	public InputValueDefinitionElements getInputValueDefinitionAccess() {
		return pInputValueDefinition;
	}
	
	public ParserRule getInputValueDefinitionRule() {
		return getInputValueDefinitionAccess().getRule();
	}
	
	//Type:
	//	NamedType | ListType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//NamedType:
	//	typeDefinition=[TypeDefinition|NAME] nonNull?='!'?;
	public NamedTypeElements getNamedTypeAccess() {
		return pNamedType;
	}
	
	public ParserRule getNamedTypeRule() {
		return getNamedTypeAccess().getRule();
	}
	
	//ListType:
	//	'[' type=Type ']' nonNull?='!'?;
	public ListTypeElements getListTypeAccess() {
		return pListType;
	}
	
	public ParserRule getListTypeRule() {
		return getListTypeAccess().getRule();
	}
	
	//IntValue:
	//	value=INT_VALUE;
	public IntValueElements getIntValueAccess() {
		return pIntValue;
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//FloatValue:
	//	value=FLOAT_VALUE;
	public FloatValueElements getFloatValueAccess() {
		return pFloatValue;
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}
	
	//NullValue:
	//	value='null';
	public NullValueElements getNullValueAccess() {
		return pNullValue;
	}
	
	public ParserRule getNullValueRule() {
		return getNullValueAccess().getRule();
	}
	
	//StringValue:
	//	value=(SL_STRING_VALUE | ML_STRING_VALUE);
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//BooleanValue:
	//	value=('true' | 'false');
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	//EnumValue:
	//	value=[EnumValueDefinition|NAME];
	public EnumValueElements getEnumValueAccess() {
		return pEnumValue;
	}
	
	public ParserRule getEnumValueRule() {
		return getEnumValueAccess().getRule();
	}
	
	//ObjectValue:
	//	{ObjectValue} '{' fields+=ObjectField* '}';
	public ObjectValueElements getObjectValueAccess() {
		return pObjectValue;
	}
	
	public ParserRule getObjectValueRule() {
		return getObjectValueAccess().getRule();
	}
	
	//ObjectField:
	//	fieldDefinition=[FieldDefinition|NAME] ':' value=ConstValue;
	public ObjectFieldElements getObjectFieldAccess() {
		return pObjectField;
	}
	
	public ParserRule getObjectFieldRule() {
		return getObjectFieldAccess().getRule();
	}
	
	//ConstValue:
	//	IntValue | FloatValue | BooleanValue | NullValue | StringValue | EnumValue | ListValue | ObjectValue;
	public ConstValueElements getConstValueAccess() {
		return pConstValue;
	}
	
	public ParserRule getConstValueRule() {
		return getConstValueAccess().getRule();
	}
	
	//ListValue:
	//	{ListValue} '[' values+=ConstValue* ']';
	public ListValueElements getListValueAccess() {
		return pListValue;
	}
	
	public ParserRule getListValueRule() {
		return getListValueAccess().getRule();
	}
	
	//DirectiveDefinition:
	//	description=StringValue? 'directive' name=DIRECTIVE_NAME ('(' argumentsDefinition+=InputValueDefinition* ')')?
	//	repeatable?='repeatable'? 'on' '|'? directiveLocations+=DirectiveLocation ('|'
	//	directiveLocations+=DirectiveLocation)*;
	public DirectiveDefinitionElements getDirectiveDefinitionAccess() {
		return pDirectiveDefinition;
	}
	
	public ParserRule getDirectiveDefinitionRule() {
		return getDirectiveDefinitionAccess().getRule();
	}
	
	//Directive:
	//	directive=[DirectiveDefinition|DIRECTIVE_NAME] ('(' arguments+=Argument* ')')?;
	public DirectiveElements getDirectiveAccess() {
		return pDirective;
	}
	
	public ParserRule getDirectiveRule() {
		return getDirectiveAccess().getRule();
	}
	
	//Argument:
	//	argumentDefinition=[InputValueDefinition|NAME] ':' value=ConstValue;
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//enum DirectiveLocation:
	//	QUERY |
	//	MUTATION |
	//	SUBSCRIPTION |
	//	FIELD |
	//	FRAGMENT_DEFINITION |
	//	FRAGMENT_SPREAD |
	//	INLINE_FRAGMENT |
	//	VARIABLE_DEFINITION |
	//	SCHEMA |
	//	SCALAR |
	//	OBJECT |
	//	FIELD_DEFINITION |
	//	ARGUMENT_DEFINITION |
	//	INTERFACE |
	//	UNION |
	//	ENUM |
	//	ENUM_VALUE |
	//	INPUT_OBJECT |
	//	INPUT_FIELD_DEFINITION;
	public DirectiveLocationElements getDirectiveLocationAccess() {
		return eDirectiveLocation;
	}
	
	public EnumRule getDirectiveLocationRule() {
		return getDirectiveLocationAccess().getRule();
	}
	
	//enum OperationType:
	//	QUERY="query" |
	//	MUTATION="mutation" |
	//	SUBSCRIPTION="subscription";
	public OperationTypeElements getOperationTypeAccess() {
		return eOperationType;
	}
	
	public EnumRule getOperationTypeRule() {
		return getOperationTypeAccess().getRule();
	}
	
	//terminal DIRECTIVE_NAME:
	//	'@' NAME;
	public TerminalRule getDIRECTIVE_NAMERule() {
		return tDIRECTIVE_NAME;
	}
	
	//terminal NAME:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getNAMERule() {
		return tNAME;
	}
	
	//terminal INT_VALUE:
	//	'-'? '1'..'9' '0'..'9'*;
	public TerminalRule getINT_VALUERule() {
		return tINT_VALUE;
	}
	
	//terminal FLOAT_VALUE:
	//	'-'? ('0' | '1'..'9'*) '.' '0'..'9'* (('e' | 'E') ('+' | '-')? '0'..'9'*);
	public TerminalRule getFLOAT_VALUERule() {
		return tFLOAT_VALUE;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal SL_COMMENT:
	//	'#' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal COMMA:
	//	',';
	public TerminalRule getCOMMARule() {
		return tCOMMA;
	}
	
	//terminal SL_STRING_VALUE:
	//	'"' STRING_CHARACTER* '"';
	public TerminalRule getSL_STRING_VALUERule() {
		return tSL_STRING_VALUE;
	}
	
	//terminal ML_STRING_VALUE:
	//	'"""'->'"""';
	public TerminalRule getML_STRING_VALUERule() {
		return tML_STRING_VALUE;
	}
	
	//terminal STRING_CHARACTER:
	//	!('\n' | '\r' | '"' | '\\');
	public TerminalRule getSTRING_CHARACTERRule() {
		return tSTRING_CHARACTER;
	}
}
