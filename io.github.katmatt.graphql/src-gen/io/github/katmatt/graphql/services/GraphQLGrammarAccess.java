/*
 * generated by Xtext 2.23.0
 */
package io.github.katmatt.graphql.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GraphQLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class TypeSystemDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.TypeSystemDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSchemaDefinitionsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSchemaDefinitionsSchemaDefinitionParserRuleCall_0_0 = (RuleCall)cSchemaDefinitionsAssignment_0.eContents().get(0);
		private final Assignment cTypeDefinitionsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypeDefinitionsTypeDefinitionParserRuleCall_1_0 = (RuleCall)cTypeDefinitionsAssignment_1.eContents().get(0);
		
		//TypeSystemDefinition:
		//	(schemaDefinitions+=SchemaDefinition | typeDefinitions+=TypeDefinition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(schemaDefinitions+=SchemaDefinition | typeDefinitions+=TypeDefinition)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//schemaDefinitions+=SchemaDefinition
		public Assignment getSchemaDefinitionsAssignment_0() { return cSchemaDefinitionsAssignment_0; }
		
		//SchemaDefinition
		public RuleCall getSchemaDefinitionsSchemaDefinitionParserRuleCall_0_0() { return cSchemaDefinitionsSchemaDefinitionParserRuleCall_0_0; }
		
		//typeDefinitions+=TypeDefinition
		public Assignment getTypeDefinitionsAssignment_1() { return cTypeDefinitionsAssignment_1; }
		
		//TypeDefinition
		public RuleCall getTypeDefinitionsTypeDefinitionParserRuleCall_1_0() { return cTypeDefinitionsTypeDefinitionParserRuleCall_1_0; }
	}
	public class SchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.SchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSchemaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeDefinitionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDefinitionsRootOperationTypeDefinitionParserRuleCall_2_0 = (RuleCall)cTypeDefinitionsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SchemaDefinition:
		//	"schema" "{" typeDefinitions+=RootOperationTypeDefinition+ "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"schema" "{" typeDefinitions+=RootOperationTypeDefinition+ "}"
		public Group getGroup() { return cGroup; }
		
		//"schema"
		public Keyword getSchemaKeyword_0() { return cSchemaKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//typeDefinitions+=RootOperationTypeDefinition+
		public Assignment getTypeDefinitionsAssignment_2() { return cTypeDefinitionsAssignment_2; }
		
		//RootOperationTypeDefinition
		public RuleCall getTypeDefinitionsRootOperationTypeDefinitionParserRuleCall_2_0() { return cTypeDefinitionsRootOperationTypeDefinitionParserRuleCall_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class RootOperationTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.RootOperationTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperationTypeOperationTypeEnumRuleCall_0_0 = (RuleCall)cOperationTypeAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeTypeDefinitionCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeTypeDefinitionNAMETerminalRuleCall_2_0_1 = (RuleCall)cTypeTypeDefinitionCrossReference_2_0.eContents().get(1);
		
		//RootOperationTypeDefinition:
		//	operationType=OperationType ":" type=[TypeDefinition|NAME];
		@Override public ParserRule getRule() { return rule; }
		
		//operationType=OperationType ":" type=[TypeDefinition|NAME]
		public Group getGroup() { return cGroup; }
		
		//operationType=OperationType
		public Assignment getOperationTypeAssignment_0() { return cOperationTypeAssignment_0; }
		
		//OperationType
		public RuleCall getOperationTypeOperationTypeEnumRuleCall_0_0() { return cOperationTypeOperationTypeEnumRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=[TypeDefinition|NAME]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[TypeDefinition|NAME]
		public CrossReference getTypeTypeDefinitionCrossReference_2_0() { return cTypeTypeDefinitionCrossReference_2_0; }
		
		//NAME
		public RuleCall getTypeTypeDefinitionNAMETerminalRuleCall_2_0_1() { return cTypeTypeDefinitionNAMETerminalRuleCall_2_0_1; }
	}
	public class TypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.TypeDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cScalarTypeDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjectTypeDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInterfaceDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUnionTypeDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEnumTypeDefinitionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cInputObjectTypeDefinitionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//TypeDefinition:
		//	ScalarTypeDefinition | ObjectTypeDefinition | InterfaceDefinition | UnionTypeDefinition | EnumTypeDefinition |
		//	InputObjectTypeDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//ScalarTypeDefinition | ObjectTypeDefinition | InterfaceDefinition | UnionTypeDefinition | EnumTypeDefinition |
		//InputObjectTypeDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ScalarTypeDefinition
		public RuleCall getScalarTypeDefinitionParserRuleCall_0() { return cScalarTypeDefinitionParserRuleCall_0; }
		
		//ObjectTypeDefinition
		public RuleCall getObjectTypeDefinitionParserRuleCall_1() { return cObjectTypeDefinitionParserRuleCall_1; }
		
		//InterfaceDefinition
		public RuleCall getInterfaceDefinitionParserRuleCall_2() { return cInterfaceDefinitionParserRuleCall_2; }
		
		//UnionTypeDefinition
		public RuleCall getUnionTypeDefinitionParserRuleCall_3() { return cUnionTypeDefinitionParserRuleCall_3; }
		
		//EnumTypeDefinition
		public RuleCall getEnumTypeDefinitionParserRuleCall_4() { return cEnumTypeDefinitionParserRuleCall_4; }
		
		//InputObjectTypeDefinition
		public RuleCall getInputObjectTypeDefinitionParserRuleCall_5() { return cInputObjectTypeDefinitionParserRuleCall_5; }
	}
	public class ScalarTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.ScalarTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScalarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ScalarTypeDefinition:
		//	"scalar" name=NAME;
		@Override public ParserRule getRule() { return rule; }
		
		//"scalar" name=NAME
		public Group getGroup() { return cGroup; }
		
		//"scalar"
		public Keyword getScalarKeyword_0() { return cScalarKeyword_0; }
		
		//name=NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_1_0() { return cNameNAMETerminalRuleCall_1_0; }
	}
	public class ObjectTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.ObjectTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFieldDefinitionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFieldDefinitionsFieldDefinitionParserRuleCall_2_1_0 = (RuleCall)cFieldDefinitionsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//ObjectTypeDefinition:
		//	"type" name=NAME ("{" fieldDefinitions+=FieldDefinition* "}")?;
		@Override public ParserRule getRule() { return rule; }
		
		//"type" name=NAME ("{" fieldDefinitions+=FieldDefinition* "}")?
		public Group getGroup() { return cGroup; }
		
		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//name=NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_1_0() { return cNameNAMETerminalRuleCall_1_0; }
		
		//("{" fieldDefinitions+=FieldDefinition* "}")?
		public Group getGroup_2() { return cGroup_2; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//fieldDefinitions+=FieldDefinition*
		public Assignment getFieldDefinitionsAssignment_2_1() { return cFieldDefinitionsAssignment_2_1; }
		
		//FieldDefinition
		public RuleCall getFieldDefinitionsFieldDefinitionParserRuleCall_2_1_0() { return cFieldDefinitionsFieldDefinitionParserRuleCall_2_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}
	public class InterfaceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.InterfaceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFieldDefinitionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFieldDefinitionsFieldDefinitionParserRuleCall_2_1_0 = (RuleCall)cFieldDefinitionsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//InterfaceDefinition:
		//	"interface" name=NAME ("{" fieldDefinitions+=FieldDefinition* "}")?;
		@Override public ParserRule getRule() { return rule; }
		
		//"interface" name=NAME ("{" fieldDefinitions+=FieldDefinition* "}")?
		public Group getGroup() { return cGroup; }
		
		//"interface"
		public Keyword getInterfaceKeyword_0() { return cInterfaceKeyword_0; }
		
		//name=NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_1_0() { return cNameNAMETerminalRuleCall_1_0; }
		
		//("{" fieldDefinitions+=FieldDefinition* "}")?
		public Group getGroup_2() { return cGroup_2; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//fieldDefinitions+=FieldDefinition*
		public Assignment getFieldDefinitionsAssignment_2_1() { return cFieldDefinitionsAssignment_2_1; }
		
		//FieldDefinition
		public RuleCall getFieldDefinitionsFieldDefinitionParserRuleCall_2_1_0() { return cFieldDefinitionsFieldDefinitionParserRuleCall_2_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}
	public class FieldDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.FieldDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNAMETerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeTypeDefinitionCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeTypeDefinitionNAMETerminalRuleCall_2_0_1 = (RuleCall)cTypeTypeDefinitionCrossReference_2_0.eContents().get(1);
		
		//FieldDefinition:
		//	name=NAME ":" type=[TypeDefinition|NAME];
		@Override public ParserRule getRule() { return rule; }
		
		//name=NAME ":" type=[TypeDefinition|NAME]
		public Group getGroup() { return cGroup; }
		
		//name=NAME
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_0_0() { return cNameNAMETerminalRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=[TypeDefinition|NAME]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[TypeDefinition|NAME]
		public CrossReference getTypeTypeDefinitionCrossReference_2_0() { return cTypeTypeDefinitionCrossReference_2_0; }
		
		//NAME
		public RuleCall getTypeTypeDefinitionNAMETerminalRuleCall_2_0_1() { return cTypeTypeDefinitionNAMETerminalRuleCall_2_0_1; }
	}
	public class UnionTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.UnionTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMemberTypesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cMemberTypesTypeDefinitionCrossReference_2_1_0 = (CrossReference)cMemberTypesAssignment_2_1.eContents().get(0);
		private final RuleCall cMemberTypesTypeDefinitionNAMETerminalRuleCall_2_1_0_1 = (RuleCall)cMemberTypesTypeDefinitionCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cVerticalLineKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cMemberTypesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cMemberTypesTypeDefinitionCrossReference_2_2_1_0 = (CrossReference)cMemberTypesAssignment_2_2_1.eContents().get(0);
		private final RuleCall cMemberTypesTypeDefinitionNAMETerminalRuleCall_2_2_1_0_1 = (RuleCall)cMemberTypesTypeDefinitionCrossReference_2_2_1_0.eContents().get(1);
		
		//UnionTypeDefinition:
		//	"union" name=NAME ("=" memberTypes+=[TypeDefinition|NAME] ("|" memberTypes+=[TypeDefinition|NAME])*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//"union" name=NAME ("=" memberTypes+=[TypeDefinition|NAME] ("|" memberTypes+=[TypeDefinition|NAME])*)?
		public Group getGroup() { return cGroup; }
		
		//"union"
		public Keyword getUnionKeyword_0() { return cUnionKeyword_0; }
		
		//name=NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_1_0() { return cNameNAMETerminalRuleCall_1_0; }
		
		//("=" memberTypes+=[TypeDefinition|NAME] ("|" memberTypes+=[TypeDefinition|NAME])*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//memberTypes+=[TypeDefinition|NAME]
		public Assignment getMemberTypesAssignment_2_1() { return cMemberTypesAssignment_2_1; }
		
		//[TypeDefinition|NAME]
		public CrossReference getMemberTypesTypeDefinitionCrossReference_2_1_0() { return cMemberTypesTypeDefinitionCrossReference_2_1_0; }
		
		//NAME
		public RuleCall getMemberTypesTypeDefinitionNAMETerminalRuleCall_2_1_0_1() { return cMemberTypesTypeDefinitionNAMETerminalRuleCall_2_1_0_1; }
		
		//("|" memberTypes+=[TypeDefinition|NAME])*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//"|"
		public Keyword getVerticalLineKeyword_2_2_0() { return cVerticalLineKeyword_2_2_0; }
		
		//memberTypes+=[TypeDefinition|NAME]
		public Assignment getMemberTypesAssignment_2_2_1() { return cMemberTypesAssignment_2_2_1; }
		
		//[TypeDefinition|NAME]
		public CrossReference getMemberTypesTypeDefinitionCrossReference_2_2_1_0() { return cMemberTypesTypeDefinitionCrossReference_2_2_1_0; }
		
		//NAME
		public RuleCall getMemberTypesTypeDefinitionNAMETerminalRuleCall_2_2_1_0_1() { return cMemberTypesTypeDefinitionNAMETerminalRuleCall_2_2_1_0_1; }
	}
	public class EnumTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.EnumTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueDefinitionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueDefinitionsEnumValueDefinitionParserRuleCall_2_1_0 = (RuleCall)cValueDefinitionsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//EnumTypeDefinition:
		//	"enum" name=NAME ("{" valueDefinitions+=EnumValueDefinition "}")?;
		@Override public ParserRule getRule() { return rule; }
		
		//"enum" name=NAME ("{" valueDefinitions+=EnumValueDefinition "}")?
		public Group getGroup() { return cGroup; }
		
		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//name=NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_1_0() { return cNameNAMETerminalRuleCall_1_0; }
		
		//("{" valueDefinitions+=EnumValueDefinition "}")?
		public Group getGroup_2() { return cGroup_2; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//valueDefinitions+=EnumValueDefinition
		public Assignment getValueDefinitionsAssignment_2_1() { return cValueDefinitionsAssignment_2_1; }
		
		//EnumValueDefinition
		public RuleCall getValueDefinitionsEnumValueDefinitionParserRuleCall_2_1_0() { return cValueDefinitionsEnumValueDefinitionParserRuleCall_2_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}
	public class EnumValueDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.EnumValueDefinition");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameNAMETerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EnumValueDefinition:
		//	name=NAME;
		@Override public ParserRule getRule() { return rule; }
		
		//name=NAME
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_0() { return cNameNAMETerminalRuleCall_0; }
	}
	public class InputObjectTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.InputObjectTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFieldDefinitionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFieldDefinitionsFieldDefinitionParserRuleCall_2_1_0 = (RuleCall)cFieldDefinitionsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//InputObjectTypeDefinition:
		//	"input" name=NAME ("{" fieldDefinitions+=FieldDefinition* "}")?;
		@Override public ParserRule getRule() { return rule; }
		
		//"input" name=NAME ("{" fieldDefinitions+=FieldDefinition* "}")?
		public Group getGroup() { return cGroup; }
		
		//"input"
		public Keyword getInputKeyword_0() { return cInputKeyword_0; }
		
		//name=NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_1_0() { return cNameNAMETerminalRuleCall_1_0; }
		
		//("{" fieldDefinitions+=FieldDefinition* "}")?
		public Group getGroup_2() { return cGroup_2; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//fieldDefinitions+=FieldDefinition*
		public Assignment getFieldDefinitionsAssignment_2_1() { return cFieldDefinitionsAssignment_2_1; }
		
		//FieldDefinition
		public RuleCall getFieldDefinitionsFieldDefinitionParserRuleCall_2_1_0() { return cFieldDefinitionsFieldDefinitionParserRuleCall_2_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}
	
	public class OperationTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.OperationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cQUERYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cQUERYQueryKeyword_0_0 = (Keyword)cQUERYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMUTATIONEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMUTATIONMutationKeyword_1_0 = (Keyword)cMUTATIONEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSUBSCRIPTIONEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSUBSCRIPTIONSubscriptionKeyword_2_0 = (Keyword)cSUBSCRIPTIONEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum OperationType:
		//	QUERY="query" |
		//	MUTATION="mutation" |
		//	SUBSCRIPTION="subscription";
		public EnumRule getRule() { return rule; }
		
		//QUERY="query" | MUTATION="mutation" | SUBSCRIPTION="subscription"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//QUERY="query"
		public EnumLiteralDeclaration getQUERYEnumLiteralDeclaration_0() { return cQUERYEnumLiteralDeclaration_0; }
		
		//"query"
		public Keyword getQUERYQueryKeyword_0_0() { return cQUERYQueryKeyword_0_0; }
		
		//MUTATION="mutation"
		public EnumLiteralDeclaration getMUTATIONEnumLiteralDeclaration_1() { return cMUTATIONEnumLiteralDeclaration_1; }
		
		//"mutation"
		public Keyword getMUTATIONMutationKeyword_1_0() { return cMUTATIONMutationKeyword_1_0; }
		
		//SUBSCRIPTION="subscription"
		public EnumLiteralDeclaration getSUBSCRIPTIONEnumLiteralDeclaration_2() { return cSUBSCRIPTIONEnumLiteralDeclaration_2; }
		
		//"subscription"
		public Keyword getSUBSCRIPTIONSubscriptionKeyword_2_0() { return cSUBSCRIPTIONSubscriptionKeyword_2_0; }
	}
	
	private final TypeSystemDefinitionElements pTypeSystemDefinition;
	private final SchemaDefinitionElements pSchemaDefinition;
	private final RootOperationTypeDefinitionElements pRootOperationTypeDefinition;
	private final TypeDefinitionElements pTypeDefinition;
	private final ScalarTypeDefinitionElements pScalarTypeDefinition;
	private final ObjectTypeDefinitionElements pObjectTypeDefinition;
	private final InterfaceDefinitionElements pInterfaceDefinition;
	private final FieldDefinitionElements pFieldDefinition;
	private final UnionTypeDefinitionElements pUnionTypeDefinition;
	private final EnumTypeDefinitionElements pEnumTypeDefinition;
	private final EnumValueDefinitionElements pEnumValueDefinition;
	private final InputObjectTypeDefinitionElements pInputObjectTypeDefinition;
	private final OperationTypeElements eOperationType;
	private final TerminalRule tNAME;
	private final TerminalRule tWS;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tCOMMA;
	
	private final Grammar grammar;

	@Inject
	public GraphQLGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pTypeSystemDefinition = new TypeSystemDefinitionElements();
		this.pSchemaDefinition = new SchemaDefinitionElements();
		this.pRootOperationTypeDefinition = new RootOperationTypeDefinitionElements();
		this.pTypeDefinition = new TypeDefinitionElements();
		this.pScalarTypeDefinition = new ScalarTypeDefinitionElements();
		this.pObjectTypeDefinition = new ObjectTypeDefinitionElements();
		this.pInterfaceDefinition = new InterfaceDefinitionElements();
		this.pFieldDefinition = new FieldDefinitionElements();
		this.pUnionTypeDefinition = new UnionTypeDefinitionElements();
		this.pEnumTypeDefinition = new EnumTypeDefinitionElements();
		this.pEnumValueDefinition = new EnumValueDefinitionElements();
		this.pInputObjectTypeDefinition = new InputObjectTypeDefinitionElements();
		this.eOperationType = new OperationTypeElements();
		this.tNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.NAME");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.WS");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.SL_COMMENT");
		this.tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.katmatt.graphql.GraphQL.COMMA");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("io.github.katmatt.graphql.GraphQL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//TypeSystemDefinition:
	//	(schemaDefinitions+=SchemaDefinition | typeDefinitions+=TypeDefinition)*;
	public TypeSystemDefinitionElements getTypeSystemDefinitionAccess() {
		return pTypeSystemDefinition;
	}
	
	public ParserRule getTypeSystemDefinitionRule() {
		return getTypeSystemDefinitionAccess().getRule();
	}
	
	//SchemaDefinition:
	//	"schema" "{" typeDefinitions+=RootOperationTypeDefinition+ "}";
	public SchemaDefinitionElements getSchemaDefinitionAccess() {
		return pSchemaDefinition;
	}
	
	public ParserRule getSchemaDefinitionRule() {
		return getSchemaDefinitionAccess().getRule();
	}
	
	//RootOperationTypeDefinition:
	//	operationType=OperationType ":" type=[TypeDefinition|NAME];
	public RootOperationTypeDefinitionElements getRootOperationTypeDefinitionAccess() {
		return pRootOperationTypeDefinition;
	}
	
	public ParserRule getRootOperationTypeDefinitionRule() {
		return getRootOperationTypeDefinitionAccess().getRule();
	}
	
	//TypeDefinition:
	//	ScalarTypeDefinition | ObjectTypeDefinition | InterfaceDefinition | UnionTypeDefinition | EnumTypeDefinition |
	//	InputObjectTypeDefinition;
	public TypeDefinitionElements getTypeDefinitionAccess() {
		return pTypeDefinition;
	}
	
	public ParserRule getTypeDefinitionRule() {
		return getTypeDefinitionAccess().getRule();
	}
	
	//ScalarTypeDefinition:
	//	"scalar" name=NAME;
	public ScalarTypeDefinitionElements getScalarTypeDefinitionAccess() {
		return pScalarTypeDefinition;
	}
	
	public ParserRule getScalarTypeDefinitionRule() {
		return getScalarTypeDefinitionAccess().getRule();
	}
	
	//ObjectTypeDefinition:
	//	"type" name=NAME ("{" fieldDefinitions+=FieldDefinition* "}")?;
	public ObjectTypeDefinitionElements getObjectTypeDefinitionAccess() {
		return pObjectTypeDefinition;
	}
	
	public ParserRule getObjectTypeDefinitionRule() {
		return getObjectTypeDefinitionAccess().getRule();
	}
	
	//InterfaceDefinition:
	//	"interface" name=NAME ("{" fieldDefinitions+=FieldDefinition* "}")?;
	public InterfaceDefinitionElements getInterfaceDefinitionAccess() {
		return pInterfaceDefinition;
	}
	
	public ParserRule getInterfaceDefinitionRule() {
		return getInterfaceDefinitionAccess().getRule();
	}
	
	//FieldDefinition:
	//	name=NAME ":" type=[TypeDefinition|NAME];
	public FieldDefinitionElements getFieldDefinitionAccess() {
		return pFieldDefinition;
	}
	
	public ParserRule getFieldDefinitionRule() {
		return getFieldDefinitionAccess().getRule();
	}
	
	//UnionTypeDefinition:
	//	"union" name=NAME ("=" memberTypes+=[TypeDefinition|NAME] ("|" memberTypes+=[TypeDefinition|NAME])*)?;
	public UnionTypeDefinitionElements getUnionTypeDefinitionAccess() {
		return pUnionTypeDefinition;
	}
	
	public ParserRule getUnionTypeDefinitionRule() {
		return getUnionTypeDefinitionAccess().getRule();
	}
	
	//EnumTypeDefinition:
	//	"enum" name=NAME ("{" valueDefinitions+=EnumValueDefinition "}")?;
	public EnumTypeDefinitionElements getEnumTypeDefinitionAccess() {
		return pEnumTypeDefinition;
	}
	
	public ParserRule getEnumTypeDefinitionRule() {
		return getEnumTypeDefinitionAccess().getRule();
	}
	
	//EnumValueDefinition:
	//	name=NAME;
	public EnumValueDefinitionElements getEnumValueDefinitionAccess() {
		return pEnumValueDefinition;
	}
	
	public ParserRule getEnumValueDefinitionRule() {
		return getEnumValueDefinitionAccess().getRule();
	}
	
	//InputObjectTypeDefinition:
	//	"input" name=NAME ("{" fieldDefinitions+=FieldDefinition* "}")?;
	public InputObjectTypeDefinitionElements getInputObjectTypeDefinitionAccess() {
		return pInputObjectTypeDefinition;
	}
	
	public ParserRule getInputObjectTypeDefinitionRule() {
		return getInputObjectTypeDefinitionAccess().getRule();
	}
	
	//enum OperationType:
	//	QUERY="query" |
	//	MUTATION="mutation" |
	//	SUBSCRIPTION="subscription";
	public OperationTypeElements getOperationTypeAccess() {
		return eOperationType;
	}
	
	public EnumRule getOperationTypeRule() {
		return getOperationTypeAccess().getRule();
	}
	
	//terminal NAME:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getNAMERule() {
		return tNAME;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal SL_COMMENT:
	//	'#' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal COMMA:
	//	',';
	public TerminalRule getCOMMARule() {
		return tCOMMA;
	}
}
