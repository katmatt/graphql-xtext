grammar io.github.katmatt.graphql.GraphQL

hidden(WS, SL_COMMENT, COMMA)

import 'http://www.eclipse.org/emf/2002/Ecore'
generate graphQL "http://www.github.io/katmatt/graphql/GraphQL"

TypeSystemDefinition :
	(
		schemaDefinitions+=SchemaDefinition | 
		typeDefinitions+=TypeDefinition |
		directiveDefinitions+=DirectiveDefinition		
	)*;
	
SchemaDefinition : 
	description=StringValue? "schema" "{" typeDefinitions+=RootOperationTypeDefinition+ "}"
;

RootOperationTypeDefinition : 
	operationType=OperationType ":" type=[TypeDefinition|NAME]
;

TypeDefinition: 
	ScalarTypeDefinition |
	ObjectTypeDefinition |
	InterfaceDefinition |
	UnionTypeDefinition |
	EnumTypeDefinition |
	InputObjectTypeDefinition
;

ScalarTypeDefinition: 
	description=StringValue? "scalar" name=NAME
		directives+=Directive*
;

ObjectTypeDefinition: 
	description=StringValue? "type" name=NAME 
		('implements' implements=IntersectionType)? 
		directives+=Directive*
	("{" fieldDefinitions+=FieldDefinition* "}")?
;

InterfaceDefinition: 
	description=StringValue? "interface" name=NAME
		('implements' implements=IntersectionType)?
		directives+=Directive*
	("{" fieldDefinitions+=FieldDefinition* "}")?
;

FieldDefinition: 
	description=StringValue? name=NAME arguments=ArgumentsDefinition? ":" type=Type
;

UnionTypeDefinition: 
	description=StringValue? "union" name=NAME
		directives+=Directive* 
		("=" "|"? memberTypes+=Type ("|" memberTypes+=Type)*)?
;

EnumTypeDefinition: 
	description=StringValue? "enum" name=NAME 
		directives+=Directive*
		("{" valueDefinitions+=EnumValueDefinition* "}")?
;

EnumValueDefinition: 
	description=StringValue? name=NAME
;

InputObjectTypeDefinition: 
	description=StringValue? "input" name=NAME 
		directives+=Directive*
		("{" inputsFieldDefinitions+=InputValueDefinition* "}")?
;

InputValueDefinition:
	description=StringValue? name=NAME ":" type=Type ('=' defaultValue=ConstValue)?
;

IntersectionType: 
	'&'? memberTypes+=Type ('&' memberTypes+=Type)*
;

Type: 
	NamedType | 
	ListType
;

NamedType: 
	typeDefinition=[TypeDefinition|NAME] nonNull?='!'?
;

ListType: 
	'[' type=Type ']' nonNull?='!'?
;

IntValue:
	value=INT_VALUE
;

FloatValue:
	value=FLOAT_VALUE
;

NullValue:
	value='null'
;

StringValue: 
	value=(SL_STRING_VALUE | ML_STRING_VALUE)
;

BooleanValue:
	value=('true' | 'false')
;

EnumValue:
	value=[EnumValueDefinition|NAME]
;

ObjectValue:
	{ObjectValue} '{' fields+=ObjectField* '}'
;

ObjectField:
	name=[FieldDefinition|NAME] ':' value=ConstValue	
;

ConstValue:
		IntValue | 
		FloatValue |
		BooleanValue | 
		NullValue | 
		StringValue |
		EnumValue | 
		ListValue | 
		ObjectValue
;

ListValue:
	{ListValue} '[' values+=ConstValue* ']'
;

DirectiveDefinition:
	description=StringValue? 'directive' name=DIRECTIVE_NAME 
		argumentDefinitions=ArgumentsDefinition? 
	repeatable?='repeatable'? 'on' directiveLocations+=DirectiveLocations
;

Directive:
	name=DIRECTIVE_NAME arguments=Arguments?
;

Arguments:
	{Arguments} '(' arguments+=Argument* ')'
;

Argument:
	argumentDefinition=[InputValueDefinition|NAME] ':' value=ConstValue	
;

ArgumentsDefinition:
	{ArgumentsDefinition} '(' argumentDefinitions+=InputValueDefinition* ')'
;

DirectiveLocations:
	'|'? directiveLocations+=DirectiveLocation ('|' directiveLocations+=DirectiveLocation)*
;

enum DirectiveLocation: 
	QUERY |
	MUTATION |
	SUBSCRIPTION |
	FIELD |
	FRAGMENT_DEFINITION |
	FRAGMENT_SPREAD |
	INLINE_FRAGMENT |
	VARIABLE_DEFINITION |
	SCHEMA |
	SCALAR |
	OBJECT |
	FIELD_DEFINITION |
	ARGUMENT_DEFINITION  |
	INTERFACE |
	UNION |
	ENUM |
	ENUM_VALUE |
	INPUT_OBJECT |
	INPUT_FIELD_DEFINITION
;

enum OperationType : 
	QUERY = "query" | 
	MUTATION = "mutation" | 
	SUBSCRIPTION = "subscription"
;

terminal DIRECTIVE_NAME returns EString: '@' NAME;

terminal NAME returns EString: ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal INT_VALUE returns EString: '-'? ('1'..'9')('0'..'9')*;
terminal FLOAT_VALUE returns EString: '-'? ('0'|('1'..'9')*)'.'('0'..'9')*(('e'|'E')('+'|'-')?('0'..'9')*);
terminal WS: (' '|'\t'|'\r'|'\n')+;
terminal SL_COMMENT: '#' !('\n'|'\r')* ('\r'? '\n')?;

terminal COMMA: ',';

terminal SL_STRING_VALUE returns EString: ('"' STRING_CHARACTER* '"');
terminal ML_STRING_VALUE returns EString: '"""' -> '"""';
terminal STRING_CHARACTER returns EString: !('\n'|'\r'|'"'|'\\');


