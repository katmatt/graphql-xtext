/*
 * generated by Xtext 2.23.0
 */
package io.github.katmatt.graphql.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import io.github.katmatt.graphql.ide.contentassist.antlr.internal.InternalGraphQLParser;
import io.github.katmatt.graphql.services.GraphQLGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class GraphQLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(GraphQLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, GraphQLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTypeSystemDefinitionAccess().getAlternatives(), "rule__TypeSystemDefinition__Alternatives");
			builder.put(grammarAccess.getTypeDefinitionAccess().getAlternatives(), "rule__TypeDefinition__Alternatives");
			builder.put(grammarAccess.getOperationTypeAccess().getAlternatives(), "rule__OperationType__Alternatives");
			builder.put(grammarAccess.getSchemaDefinitionAccess().getGroup(), "rule__SchemaDefinition__Group__0");
			builder.put(grammarAccess.getRootOperationTypeDefinitionAccess().getGroup(), "rule__RootOperationTypeDefinition__Group__0");
			builder.put(grammarAccess.getScalarTypeDefinitionAccess().getGroup(), "rule__ScalarTypeDefinition__Group__0");
			builder.put(grammarAccess.getObjectTypeDefinitionAccess().getGroup(), "rule__ObjectTypeDefinition__Group__0");
			builder.put(grammarAccess.getObjectTypeDefinitionAccess().getGroup_2(), "rule__ObjectTypeDefinition__Group_2__0");
			builder.put(grammarAccess.getInterfaceDefinitionAccess().getGroup(), "rule__InterfaceDefinition__Group__0");
			builder.put(grammarAccess.getInterfaceDefinitionAccess().getGroup_2(), "rule__InterfaceDefinition__Group_2__0");
			builder.put(grammarAccess.getFieldDefinitionAccess().getGroup(), "rule__FieldDefinition__Group__0");
			builder.put(grammarAccess.getUnionTypeDefinitionAccess().getGroup(), "rule__UnionTypeDefinition__Group__0");
			builder.put(grammarAccess.getUnionTypeDefinitionAccess().getGroup_2(), "rule__UnionTypeDefinition__Group_2__0");
			builder.put(grammarAccess.getUnionTypeDefinitionAccess().getGroup_2_2(), "rule__UnionTypeDefinition__Group_2_2__0");
			builder.put(grammarAccess.getEnumTypeDefinitionAccess().getGroup(), "rule__EnumTypeDefinition__Group__0");
			builder.put(grammarAccess.getEnumTypeDefinitionAccess().getGroup_2(), "rule__EnumTypeDefinition__Group_2__0");
			builder.put(grammarAccess.getInputObjectTypeDefinitionAccess().getGroup(), "rule__InputObjectTypeDefinition__Group__0");
			builder.put(grammarAccess.getInputObjectTypeDefinitionAccess().getGroup_2(), "rule__InputObjectTypeDefinition__Group_2__0");
			builder.put(grammarAccess.getTypeSystemDefinitionAccess().getSchemaDefinitionsAssignment_0(), "rule__TypeSystemDefinition__SchemaDefinitionsAssignment_0");
			builder.put(grammarAccess.getTypeSystemDefinitionAccess().getTypeDefinitionsAssignment_1(), "rule__TypeSystemDefinition__TypeDefinitionsAssignment_1");
			builder.put(grammarAccess.getSchemaDefinitionAccess().getTypeDefinitionsAssignment_2(), "rule__SchemaDefinition__TypeDefinitionsAssignment_2");
			builder.put(grammarAccess.getRootOperationTypeDefinitionAccess().getOperationTypeAssignment_0(), "rule__RootOperationTypeDefinition__OperationTypeAssignment_0");
			builder.put(grammarAccess.getRootOperationTypeDefinitionAccess().getTypeAssignment_2(), "rule__RootOperationTypeDefinition__TypeAssignment_2");
			builder.put(grammarAccess.getScalarTypeDefinitionAccess().getNameAssignment_1(), "rule__ScalarTypeDefinition__NameAssignment_1");
			builder.put(grammarAccess.getObjectTypeDefinitionAccess().getNameAssignment_1(), "rule__ObjectTypeDefinition__NameAssignment_1");
			builder.put(grammarAccess.getObjectTypeDefinitionAccess().getFieldDefinitionsAssignment_2_1(), "rule__ObjectTypeDefinition__FieldDefinitionsAssignment_2_1");
			builder.put(grammarAccess.getInterfaceDefinitionAccess().getNameAssignment_1(), "rule__InterfaceDefinition__NameAssignment_1");
			builder.put(grammarAccess.getInterfaceDefinitionAccess().getFieldDefinitionsAssignment_2_1(), "rule__InterfaceDefinition__FieldDefinitionsAssignment_2_1");
			builder.put(grammarAccess.getFieldDefinitionAccess().getNameAssignment_0(), "rule__FieldDefinition__NameAssignment_0");
			builder.put(grammarAccess.getFieldDefinitionAccess().getTypeAssignment_2(), "rule__FieldDefinition__TypeAssignment_2");
			builder.put(grammarAccess.getUnionTypeDefinitionAccess().getNameAssignment_1(), "rule__UnionTypeDefinition__NameAssignment_1");
			builder.put(grammarAccess.getUnionTypeDefinitionAccess().getMemberTypesAssignment_2_1(), "rule__UnionTypeDefinition__MemberTypesAssignment_2_1");
			builder.put(grammarAccess.getUnionTypeDefinitionAccess().getMemberTypesAssignment_2_2_1(), "rule__UnionTypeDefinition__MemberTypesAssignment_2_2_1");
			builder.put(grammarAccess.getEnumTypeDefinitionAccess().getNameAssignment_1(), "rule__EnumTypeDefinition__NameAssignment_1");
			builder.put(grammarAccess.getEnumTypeDefinitionAccess().getValueDefinitionsAssignment_2_1(), "rule__EnumTypeDefinition__ValueDefinitionsAssignment_2_1");
			builder.put(grammarAccess.getEnumValueDefinitionAccess().getNameAssignment(), "rule__EnumValueDefinition__NameAssignment");
			builder.put(grammarAccess.getInputObjectTypeDefinitionAccess().getNameAssignment_1(), "rule__InputObjectTypeDefinition__NameAssignment_1");
			builder.put(grammarAccess.getInputObjectTypeDefinitionAccess().getFieldDefinitionsAssignment_2_1(), "rule__InputObjectTypeDefinition__FieldDefinitionsAssignment_2_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private GraphQLGrammarAccess grammarAccess;

	@Override
	protected InternalGraphQLParser createParser() {
		InternalGraphQLParser result = new InternalGraphQLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_SL_COMMENT", "RULE_COMMA" };
	}

	public GraphQLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GraphQLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
