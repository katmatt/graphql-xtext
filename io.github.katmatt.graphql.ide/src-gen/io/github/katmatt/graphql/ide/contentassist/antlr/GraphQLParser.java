/*
 * generated by Xtext 2.23.0
 */
package io.github.katmatt.graphql.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import io.github.katmatt.graphql.ide.contentassist.antlr.internal.InternalGraphQLParser;
import io.github.katmatt.graphql.services.GraphQLGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class GraphQLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(GraphQLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, GraphQLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTypeSystemDefinitionAccess().getAlternatives(), "rule__TypeSystemDefinition__Alternatives");
			builder.put(grammarAccess.getTypeDefinitionAccess().getAlternatives(), "rule__TypeDefinition__Alternatives");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getStringValueAccess().getValueAlternatives_0(), "rule__StringValue__ValueAlternatives_0");
			builder.put(grammarAccess.getBooleanValueAccess().getValueAlternatives_0(), "rule__BooleanValue__ValueAlternatives_0");
			builder.put(grammarAccess.getConstValueAccess().getAlternatives(), "rule__ConstValue__Alternatives");
			builder.put(grammarAccess.getDirectiveLocationAccess().getAlternatives(), "rule__DirectiveLocation__Alternatives");
			builder.put(grammarAccess.getOperationTypeAccess().getAlternatives(), "rule__OperationType__Alternatives");
			builder.put(grammarAccess.getSchemaDefinitionAccess().getGroup(), "rule__SchemaDefinition__Group__0");
			builder.put(grammarAccess.getRootOperationTypeDefinitionAccess().getGroup(), "rule__RootOperationTypeDefinition__Group__0");
			builder.put(grammarAccess.getScalarTypeDefinitionAccess().getGroup(), "rule__ScalarTypeDefinition__Group__0");
			builder.put(grammarAccess.getObjectTypeDefinitionAccess().getGroup(), "rule__ObjectTypeDefinition__Group__0");
			builder.put(grammarAccess.getObjectTypeDefinitionAccess().getGroup_3(), "rule__ObjectTypeDefinition__Group_3__0");
			builder.put(grammarAccess.getObjectTypeDefinitionAccess().getGroup_5(), "rule__ObjectTypeDefinition__Group_5__0");
			builder.put(grammarAccess.getInterfaceDefinitionAccess().getGroup(), "rule__InterfaceDefinition__Group__0");
			builder.put(grammarAccess.getInterfaceDefinitionAccess().getGroup_3(), "rule__InterfaceDefinition__Group_3__0");
			builder.put(grammarAccess.getInterfaceDefinitionAccess().getGroup_4(), "rule__InterfaceDefinition__Group_4__0");
			builder.put(grammarAccess.getFieldDefinitionAccess().getGroup(), "rule__FieldDefinition__Group__0");
			builder.put(grammarAccess.getUnionTypeDefinitionAccess().getGroup(), "rule__UnionTypeDefinition__Group__0");
			builder.put(grammarAccess.getUnionTypeDefinitionAccess().getGroup_3(), "rule__UnionTypeDefinition__Group_3__0");
			builder.put(grammarAccess.getUnionTypeDefinitionAccess().getGroup_3_3(), "rule__UnionTypeDefinition__Group_3_3__0");
			builder.put(grammarAccess.getEnumTypeDefinitionAccess().getGroup(), "rule__EnumTypeDefinition__Group__0");
			builder.put(grammarAccess.getEnumTypeDefinitionAccess().getGroup_3(), "rule__EnumTypeDefinition__Group_3__0");
			builder.put(grammarAccess.getEnumValueDefinitionAccess().getGroup(), "rule__EnumValueDefinition__Group__0");
			builder.put(grammarAccess.getInputObjectTypeDefinitionAccess().getGroup(), "rule__InputObjectTypeDefinition__Group__0");
			builder.put(grammarAccess.getInputObjectTypeDefinitionAccess().getGroup_3(), "rule__InputObjectTypeDefinition__Group_3__0");
			builder.put(grammarAccess.getInputValueDefinitionAccess().getGroup(), "rule__InputValueDefinition__Group__0");
			builder.put(grammarAccess.getInputValueDefinitionAccess().getGroup_4(), "rule__InputValueDefinition__Group_4__0");
			builder.put(grammarAccess.getIntersectionTypeAccess().getGroup(), "rule__IntersectionType__Group__0");
			builder.put(grammarAccess.getIntersectionTypeAccess().getGroup_2(), "rule__IntersectionType__Group_2__0");
			builder.put(grammarAccess.getNamedTypeAccess().getGroup(), "rule__NamedType__Group__0");
			builder.put(grammarAccess.getListTypeAccess().getGroup(), "rule__ListType__Group__0");
			builder.put(grammarAccess.getObjectValueAccess().getGroup(), "rule__ObjectValue__Group__0");
			builder.put(grammarAccess.getObjectFieldAccess().getGroup(), "rule__ObjectField__Group__0");
			builder.put(grammarAccess.getListValueAccess().getGroup(), "rule__ListValue__Group__0");
			builder.put(grammarAccess.getDirectiveDefinitionAccess().getGroup(), "rule__DirectiveDefinition__Group__0");
			builder.put(grammarAccess.getDirectiveAccess().getGroup(), "rule__Directive__Group__0");
			builder.put(grammarAccess.getArgumentsAccess().getGroup(), "rule__Arguments__Group__0");
			builder.put(grammarAccess.getArgumentAccess().getGroup(), "rule__Argument__Group__0");
			builder.put(grammarAccess.getArgumentsDefinitionAccess().getGroup(), "rule__ArgumentsDefinition__Group__0");
			builder.put(grammarAccess.getDirectiveLocationsAccess().getGroup(), "rule__DirectiveLocations__Group__0");
			builder.put(grammarAccess.getDirectiveLocationsAccess().getGroup_2(), "rule__DirectiveLocations__Group_2__0");
			builder.put(grammarAccess.getTypeSystemDefinitionAccess().getSchemaDefinitionsAssignment_0(), "rule__TypeSystemDefinition__SchemaDefinitionsAssignment_0");
			builder.put(grammarAccess.getTypeSystemDefinitionAccess().getTypeDefinitionsAssignment_1(), "rule__TypeSystemDefinition__TypeDefinitionsAssignment_1");
			builder.put(grammarAccess.getTypeSystemDefinitionAccess().getDirectiveDefinitionsAssignment_2(), "rule__TypeSystemDefinition__DirectiveDefinitionsAssignment_2");
			builder.put(grammarAccess.getSchemaDefinitionAccess().getDescriptionAssignment_0(), "rule__SchemaDefinition__DescriptionAssignment_0");
			builder.put(grammarAccess.getSchemaDefinitionAccess().getTypeDefinitionsAssignment_3(), "rule__SchemaDefinition__TypeDefinitionsAssignment_3");
			builder.put(grammarAccess.getRootOperationTypeDefinitionAccess().getOperationTypeAssignment_0(), "rule__RootOperationTypeDefinition__OperationTypeAssignment_0");
			builder.put(grammarAccess.getRootOperationTypeDefinitionAccess().getTypeAssignment_2(), "rule__RootOperationTypeDefinition__TypeAssignment_2");
			builder.put(grammarAccess.getScalarTypeDefinitionAccess().getDescriptionAssignment_0(), "rule__ScalarTypeDefinition__DescriptionAssignment_0");
			builder.put(grammarAccess.getScalarTypeDefinitionAccess().getNameAssignment_2(), "rule__ScalarTypeDefinition__NameAssignment_2");
			builder.put(grammarAccess.getObjectTypeDefinitionAccess().getDescriptionAssignment_0(), "rule__ObjectTypeDefinition__DescriptionAssignment_0");
			builder.put(grammarAccess.getObjectTypeDefinitionAccess().getNameAssignment_2(), "rule__ObjectTypeDefinition__NameAssignment_2");
			builder.put(grammarAccess.getObjectTypeDefinitionAccess().getImplementsAssignment_3_1(), "rule__ObjectTypeDefinition__ImplementsAssignment_3_1");
			builder.put(grammarAccess.getObjectTypeDefinitionAccess().getDirectivesAssignment_4(), "rule__ObjectTypeDefinition__DirectivesAssignment_4");
			builder.put(grammarAccess.getObjectTypeDefinitionAccess().getFieldDefinitionsAssignment_5_1(), "rule__ObjectTypeDefinition__FieldDefinitionsAssignment_5_1");
			builder.put(grammarAccess.getInterfaceDefinitionAccess().getDescriptionAssignment_0(), "rule__InterfaceDefinition__DescriptionAssignment_0");
			builder.put(grammarAccess.getInterfaceDefinitionAccess().getNameAssignment_2(), "rule__InterfaceDefinition__NameAssignment_2");
			builder.put(grammarAccess.getInterfaceDefinitionAccess().getImplementsAssignment_3_1(), "rule__InterfaceDefinition__ImplementsAssignment_3_1");
			builder.put(grammarAccess.getInterfaceDefinitionAccess().getFieldDefinitionsAssignment_4_1(), "rule__InterfaceDefinition__FieldDefinitionsAssignment_4_1");
			builder.put(grammarAccess.getFieldDefinitionAccess().getDescriptionAssignment_0(), "rule__FieldDefinition__DescriptionAssignment_0");
			builder.put(grammarAccess.getFieldDefinitionAccess().getNameAssignment_1(), "rule__FieldDefinition__NameAssignment_1");
			builder.put(grammarAccess.getFieldDefinitionAccess().getArgumentsAssignment_2(), "rule__FieldDefinition__ArgumentsAssignment_2");
			builder.put(grammarAccess.getFieldDefinitionAccess().getTypeAssignment_4(), "rule__FieldDefinition__TypeAssignment_4");
			builder.put(grammarAccess.getUnionTypeDefinitionAccess().getDescriptionAssignment_0(), "rule__UnionTypeDefinition__DescriptionAssignment_0");
			builder.put(grammarAccess.getUnionTypeDefinitionAccess().getNameAssignment_2(), "rule__UnionTypeDefinition__NameAssignment_2");
			builder.put(grammarAccess.getUnionTypeDefinitionAccess().getMemberTypesAssignment_3_2(), "rule__UnionTypeDefinition__MemberTypesAssignment_3_2");
			builder.put(grammarAccess.getUnionTypeDefinitionAccess().getMemberTypesAssignment_3_3_1(), "rule__UnionTypeDefinition__MemberTypesAssignment_3_3_1");
			builder.put(grammarAccess.getEnumTypeDefinitionAccess().getDescriptionAssignment_0(), "rule__EnumTypeDefinition__DescriptionAssignment_0");
			builder.put(grammarAccess.getEnumTypeDefinitionAccess().getNameAssignment_2(), "rule__EnumTypeDefinition__NameAssignment_2");
			builder.put(grammarAccess.getEnumTypeDefinitionAccess().getValueDefinitionsAssignment_3_1(), "rule__EnumTypeDefinition__ValueDefinitionsAssignment_3_1");
			builder.put(grammarAccess.getEnumValueDefinitionAccess().getDescriptionAssignment_0(), "rule__EnumValueDefinition__DescriptionAssignment_0");
			builder.put(grammarAccess.getEnumValueDefinitionAccess().getNameAssignment_1(), "rule__EnumValueDefinition__NameAssignment_1");
			builder.put(grammarAccess.getInputObjectTypeDefinitionAccess().getDescriptionAssignment_0(), "rule__InputObjectTypeDefinition__DescriptionAssignment_0");
			builder.put(grammarAccess.getInputObjectTypeDefinitionAccess().getNameAssignment_2(), "rule__InputObjectTypeDefinition__NameAssignment_2");
			builder.put(grammarAccess.getInputObjectTypeDefinitionAccess().getInputsFieldDefinitionsAssignment_3_1(), "rule__InputObjectTypeDefinition__InputsFieldDefinitionsAssignment_3_1");
			builder.put(grammarAccess.getInputValueDefinitionAccess().getDescriptionAssignment_0(), "rule__InputValueDefinition__DescriptionAssignment_0");
			builder.put(grammarAccess.getInputValueDefinitionAccess().getNameAssignment_1(), "rule__InputValueDefinition__NameAssignment_1");
			builder.put(grammarAccess.getInputValueDefinitionAccess().getTypeAssignment_3(), "rule__InputValueDefinition__TypeAssignment_3");
			builder.put(grammarAccess.getInputValueDefinitionAccess().getDefaultValueAssignment_4_1(), "rule__InputValueDefinition__DefaultValueAssignment_4_1");
			builder.put(grammarAccess.getIntersectionTypeAccess().getMemberTypesAssignment_1(), "rule__IntersectionType__MemberTypesAssignment_1");
			builder.put(grammarAccess.getIntersectionTypeAccess().getMemberTypesAssignment_2_1(), "rule__IntersectionType__MemberTypesAssignment_2_1");
			builder.put(grammarAccess.getNamedTypeAccess().getTypeDefinitionAssignment_0(), "rule__NamedType__TypeDefinitionAssignment_0");
			builder.put(grammarAccess.getNamedTypeAccess().getNonNullAssignment_1(), "rule__NamedType__NonNullAssignment_1");
			builder.put(grammarAccess.getListTypeAccess().getTypeAssignment_1(), "rule__ListType__TypeAssignment_1");
			builder.put(grammarAccess.getListTypeAccess().getNonNullAssignment_3(), "rule__ListType__NonNullAssignment_3");
			builder.put(grammarAccess.getIntValueAccess().getValueAssignment(), "rule__IntValue__ValueAssignment");
			builder.put(grammarAccess.getFloatValueAccess().getValueAssignment(), "rule__FloatValue__ValueAssignment");
			builder.put(grammarAccess.getNullValueAccess().getValueAssignment(), "rule__NullValue__ValueAssignment");
			builder.put(grammarAccess.getStringValueAccess().getValueAssignment(), "rule__StringValue__ValueAssignment");
			builder.put(grammarAccess.getBooleanValueAccess().getValueAssignment(), "rule__BooleanValue__ValueAssignment");
			builder.put(grammarAccess.getEnumValueAccess().getValueAssignment(), "rule__EnumValue__ValueAssignment");
			builder.put(grammarAccess.getObjectValueAccess().getFieldsAssignment_2(), "rule__ObjectValue__FieldsAssignment_2");
			builder.put(grammarAccess.getObjectFieldAccess().getNameAssignment_0(), "rule__ObjectField__NameAssignment_0");
			builder.put(grammarAccess.getObjectFieldAccess().getValueAssignment_2(), "rule__ObjectField__ValueAssignment_2");
			builder.put(grammarAccess.getListValueAccess().getValuesAssignment_2(), "rule__ListValue__ValuesAssignment_2");
			builder.put(grammarAccess.getDirectiveDefinitionAccess().getDescriptionAssignment_0(), "rule__DirectiveDefinition__DescriptionAssignment_0");
			builder.put(grammarAccess.getDirectiveDefinitionAccess().getNameAssignment_2(), "rule__DirectiveDefinition__NameAssignment_2");
			builder.put(grammarAccess.getDirectiveDefinitionAccess().getArgumentDefinitionsAssignment_3(), "rule__DirectiveDefinition__ArgumentDefinitionsAssignment_3");
			builder.put(grammarAccess.getDirectiveDefinitionAccess().getRepeatableAssignment_4(), "rule__DirectiveDefinition__RepeatableAssignment_4");
			builder.put(grammarAccess.getDirectiveDefinitionAccess().getDirectiveLocationsAssignment_6(), "rule__DirectiveDefinition__DirectiveLocationsAssignment_6");
			builder.put(grammarAccess.getDirectiveAccess().getNameAssignment_0(), "rule__Directive__NameAssignment_0");
			builder.put(grammarAccess.getDirectiveAccess().getArgumentsAssignment_1(), "rule__Directive__ArgumentsAssignment_1");
			builder.put(grammarAccess.getArgumentsAccess().getArgumentsAssignment_2(), "rule__Arguments__ArgumentsAssignment_2");
			builder.put(grammarAccess.getArgumentAccess().getArgumentDefinitionAssignment_0(), "rule__Argument__ArgumentDefinitionAssignment_0");
			builder.put(grammarAccess.getArgumentAccess().getValueAssignment_2(), "rule__Argument__ValueAssignment_2");
			builder.put(grammarAccess.getArgumentsDefinitionAccess().getArgumentDefinitionsAssignment_2(), "rule__ArgumentsDefinition__ArgumentDefinitionsAssignment_2");
			builder.put(grammarAccess.getDirectiveLocationsAccess().getDirectiveLocationsAssignment_1(), "rule__DirectiveLocations__DirectiveLocationsAssignment_1");
			builder.put(grammarAccess.getDirectiveLocationsAccess().getDirectiveLocationsAssignment_2_1(), "rule__DirectiveLocations__DirectiveLocationsAssignment_2_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private GraphQLGrammarAccess grammarAccess;

	@Override
	protected InternalGraphQLParser createParser() {
		InternalGraphQLParser result = new InternalGraphQLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_SL_COMMENT", "RULE_COMMA" };
	}

	public GraphQLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GraphQLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
